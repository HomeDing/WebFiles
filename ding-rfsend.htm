<!DOCTYPE html>
<html lang="en">

<head>
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes">
  <link rel="shortcut icon" href="/favicon.ico" type="image/x-icon" />
  <link rel="icon" href="/favicon.ico" type="image/x-icon" />
  <link rel="apple-touch-icon-precomposed" href="/favicon-256.png">
  <link rel="xx-manifest" href="/watermanifest.json">
  <title>Ding Control</title>
  <link Content-Type="text/css" href="iotstyle.css" rel="stylesheet" />
  <script src="micro.js"></script>
  <style>
    .panel {
      background-color: lightsteelblue
    }
    
    img.light {
      width: 1rem;
      height: 1rem;
      display: inline-block;
      background-image: url(red.svg);
      background-size: 100%;
    }
    
    img.light.active {
      background-image: url(green.svg);
    }
  </style>
</head>

<body>
  <div class="container">
    <div class="row wrap header">
      <div class="col stretch">
        <img class="icon menuicon" src="i/digitalout.svg" style="float:left" />
        <h1>Remote Plugs</h1>
      </div>
    </div>

    <div microID="/rfsend/i1" microBehavior='generic'>
      <div class="row panel">
        <div class="col-3">
          <span property='description'>.</span>
        </div>
        <div class="col-3">
          <button property='value' value='1'>On</button>
          <button property='value' value='0'>Off</button>
        </div>
      </div>
    </div>

    <div microID="/rfsend/i2" microBehavior='generic'>
      <div class="row panel">
        <div class="col-3">
          <span property='description'>.</span>
        </div>
        <div class="col-3">
          <button property='value' value='1'>On</button>
          <button property='value' value='0'>Off</button>
        </div>
      </div>
    </div>

    <div microID="/rfsend/i3" microBehavior='generic'>
      <div class="row panel">
        <div class="col-3">
          <span property='description'>.</span>
        </div>
        <div class="col-3">
          <button property='value' value='1'>On</button>
          <button property='value' value='0'>Off</button>
        </div>
      </div>
    </div>
    <hr />
    <div microID="/rfsend/a1" microBehavior='generic'>
      <div class="row panel">
        <div class="col-3">
          <span property='description'>.</span>
        </div>
        <div class="col-3">
          <button property='value' value='1'>On</button>
          <button property='value' value='0'>Off</button>
        </div>
      </div>
    </div>

    <div microID="/rfsend/a2" microBehavior='generic'>
      <div class="row panel">
        <div class="col-3">
          <span property='description'>.</span>
        </div>
        <div class="col-3">
          <button property='value' value='1'>On</button>
          <button property='value' value='0'>Off</button>
        </div>
      </div>
    </div>

    <div microID="/rfsend/a3" microBehavior='generic'>
      <div class="row panel">
        <div class="col-3">
          <span property='description'>.</span>
        </div>
        <div class="col-3">
          <button property='value' value='1'>On</button>
          <button property='value' value='0'>Off</button>
        </div>
      </div>
    </div>
  </div>


  <script>
    GenericElementBehavior = {
      microID: "",

      init: function() {
        hub.subscribe(this.microid + "?*", this.newData.bind(this));
      }, // init

      newData: function(path, key, value) {
        forAllNodeList(this.querySelectorAll("img[property='" + key + "']"), function(e) {
          if (value)
            e.classList.add('active');
          else
            e.classList.remove('active')
            // e.textContent = value;
          e.title = value;
        });

        forAllNodeList(this.querySelectorAll("span[property='" + key + "']"), function(e) {
          e.textContent = value;
          e.title = value;
        });

        forAllNodeList(this.querySelectorAll("input[property='" + key + "']"), function(e) {
          e.value = value;
        });
      }, // newData()

      onchange: function(e) {
        var src = e.srcElement;
        dispatch(this.microid, src.getAttribute('property'), e.srcElement.value);
        // debugger;
      },

      onclick: function(e) {
        var src = e.srcElement;
        dispatch(this.microid, src.getAttribute('property'), e.srcElement.value);
        // debugger;
      }

    }; // GenericElementBehavior

    jcl.registerBehaviour("generic", GenericElementBehavior);

    jcl.attachAll(document.body);

    function loadConfig() {
      loadAsync("config.json", "application/json", function(txt) {
        var obj = JSON.parse(txt);
        hub.publishObj(obj);
      });
    } // loadConfig()

    function updateState() {
      loadAsync("/$board", "application/json", function(txt) {
        try {
          var obj = JSON.parse(txt);
          hub.publishObj(obj);
        } catch (e) {}
      });
    } // updateState()

    loadConfig();
    window.setInterval(updateState, 4000);
  </script>

</body>