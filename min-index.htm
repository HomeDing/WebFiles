<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>IoT Ding</title>
    <link Content-Type="text/css" href="/iotstyle.css" rel="stylesheet" />

    <style>
      .card img.active {
        background-color: limegreen;
      }

      .Element .KV {
        display: block;
        clear: both;
        height: 1.5em;
      }

      .activeState {
        position: absolute;
        top: 0.4rem;
        right: 0.4rem;
        height: 1.4rem;
        width: 1.4rem;
        background-image: url(/i/stop.svg);
        background-size: 1.4rem;
      }

      .activeState.active {
        background-image: url(/i/start.svg);
        background-size: 1.4rem;
      }

      span.setconfig {
        position: absolute;
        top: 0.4rem;
        right: 2.2rem;
        height: 1.4rem;
        width: 1.4rem;
        background-image: url(/i/config.svg);
        background-size: 1.4rem;
      }

      img,
      #panel {
        user-select: none;
        -ms-user-select: none;
      }

      div[u-control] div.block.config {
        background-color: yellow;
        display: none;
      }

      div[u-control].configmode div.block.config {
        display: block;
      }
    </style>
    <script src="micro.js"></script>
  </head>

  <body>
    <div class="container">
      <div class="u-header">
        <a href="/" title="Start-Page"><img class="icon" src="/favicon.svg"/></a>
        <h1>Elements</h1>
      </div>

      <div id="panel" class="row wrap">
        <div class="col card" u-control="switch" id="/switch/0" u-is="switch" microID="/switch/0">
          <div class="block header">
            <img src="/i/default.svg" class="icon" />
            <h3>Switch</h3>
            <h4 u-text="description"></h4>
            <span class="activeState" u-active="active"></span>
          </div>
          <div class="block">
            <div id="us" class="u-switch" u-active="value">
              <label value="0">off</label>
              <div class="box">
                <div class="handle"></div>
              </div>
              <label value="1">on</label>
            </div>
            <span class="u-bool" u-active="value" style="position: absolute;top:4.4rem;right:0.4rem;"></span>
          </div>
        </div>

        <div class="col card" u-control="schedule" id="${id}" u-is="generic" microID="${id}">
          <div class="block header">
            <img src="/i/default.svg" class="icon" />
            <h3>Schedule</h3>
            <span class="activeState" u-active="active"></span>
          </div>
          <div class="block">
            <label>Start:</label><input u-value="ontime" type="time" step="1" />
            <span style="width:2rem"></span>
            <label>End:</label><input u-value="offtime" type="time" step="1" /> <label>out:</label><span u-text="value"></span>
          </div>
          <div class="block config Element"></div>
        </div>

        <div class="col card" u-control="digitalout" id="${id}" microID="${id}" u-is="generic">
          <div class="block header">
            <img src="/i/default.svg" class="icon" />
            <h3>${id}</h3>
            <h4 u-text="description"></h4>
            <span class="activeState" u-active="active"></span>
          </div>

          <div class="block Element">
            <img src="/i/default.svg" style="float:left;height:4rem;margin-right:1rem" />
            <span class="u-bool" u-active="value" style="position: absolute;top:4rem;right:0.4rem;"></span>
          </div>
        </div>

        <div class="col card" id="/dht/lr" u-control="dht" microid="/dht/lr" u-is="generic">
          <div class="block">
            <img style="float: left;height:5rem;margin-right:0.8rem" src="/i/default.svg" />
            <span class="activeState" u-active="active"></span>
            <table>
              <tbody>
                <tr>
                  <td colspan="3">
                    <h4 u-text="title"></h4>
                  </td>
                </tr>
                <tr>
                  <td colspan="3"><span u-text="description"></span></td>
                </tr>
                <tr>
                  <td style="font-size: 2rem"><span u-text="temperature">16.60</span>Â°C</td>
                  <td style="width:1rem"></td>
                  <td style="font-size: 2rem"><span u-text="humidity">45.20</span>%</td>
                </tr>
                <tr>
                  <td>Temperature</td>
                  <td></td>
                  <td>Humidity</td>
                </tr>
              </tbody>
            </table>
          </div>
          <div class="block config Element">
            <div class="KV" u-control="kv"><label class="fixed">pin:</label><span u-text="pin">12</span></div>
          </div>
        </div>
      </div>

      <div id="u-templates" style="border:2px solid green;padding:1rem;display:none">
        <div u-control="kv" class="KV"><label class="fixed">${key}:</label><span u-text="${key}"></span></div>
      </div>
    </div>

    <script>
      var panelObj = document.getElementById('panel');

      function loadAsync(url, loadCallback, errorCallback) {
        var objHTTP = new XMLHttpRequest(); // new ActiveXObject("MSXML2.XMLHTTP");
        objHTTP.open('GET', url, true);
        objHTTP.addEventListener('readystatechange', function(p) {
          if (objHTTP.readyState == 4) {
            if (objHTTP.status >= 200 && objHTTP.status < 300) {
              loadCallback(objHTTP.responseText);
            } else {
              if (errorCallback) errorCallback(this);
            } // if
          } // if
        });
        objHTTP.send();
      } // loadAsync()

      function addValueInfo(path, key, value) {
        var hText;
        if (key && key != 'active' && path.match(/^\/.*\/.*/)) {
          var hElem = document.getElementById(path);
          if (hElem) {
            var elem = hElem.querySelector("[u-text='" + key + "']");
            if (!elem) {
              hElem = hElem.querySelector('.Element');
              if (hElem) {
                var p = {
                  key: key
                };
                micro.insertTemplate(hElem, 'kv', p);
              }
            } // if
          } // if
        } // if
      } // addValueInfo

      hub.subscribe('/**/**?**', addValueInfo);

      function updateState() {
        loadAsync(
          '/$board',
          function(txt) {
            if (txt.length > 0) {
              hub.publishObj(JSON.parse(txt));
            }
          },
          null
        );
      } // updateState()

      function init() {
        loadAsync(
          '/config.json',
          function(txt) {
            if (txt.length > 0) {
              hub.publishObj(JSON.parse(txt));
              updateState();
            }
          },
          null
        );
        window.setInterval(updateState, 3800);
      } // init()

      window.addEventListener('load', init);
    </script>
  </body>
</html>
