<!DOCTYPE html>
<html>

<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>IoT Ding</title>
  <link Content-Type="text/css" href="/iotstyle.css" rel="stylesheet" />

  <style>
    .card img.active {
      background-color: limegreen;
    }

    .Element .KV {
      display: block;
      clear: both;
      height: 1.5em;
    }

    .activeState {
      position: absolute;
      top: 0.4rem;
      right: 0.4rem;
      height: 1.4rem;
      width: 1.4rem;
      background-image: url(/i/stop.svg);
      background-size: 1.4rem;
    }

    .activeState.active {
      background-image: url(/i/start.svg);
      background-size: 1.4rem;
    }

    span.setconfig {
      position: absolute;
      top: 0.4rem;
      right: 2.2rem;
      height: 1.4rem;
      width: 1.4rem;
      background-image: url(/i/config.svg);
      background-size: 1.4rem;
    }

    img,
    #panel {
      user-select: none;
      -ms-user-select: none;
    }

    div[u-control] div.block.config {
      background-color: yellow;
      display: none;
    }

    div[u-control].configmode div.block.config {
      display: block;
    }
  </style>
  <script src="micro.js"></script>
</head>

<body>
  <div class="container">
    <div class="u-header">
      <a href="/" title="Start-Page"><img class="icon" src="/i/device.svg" /></a>
      <h1>Elements</h1>
    </div>

    <div id="panel" class="row wrap">
      <div class="col card" u-control="switch" u-is="switch" microID="/switch/0">
        <div class="block">
          <h4 u-text="description"></h4>
          <span class="activeState" u-active="active"></span>
          <div id="us" class="u-slider u-switch" u-active="value">
            <label value="0">off</label>
            <div class="box">
              <div class="handle"></div>
            </div>
            <label value="1">on</label>
          </div>
          <span class="u-bool ux-value" u-active="value"></span>
        </div>
      </div>

      <div class="col card" u-control="schedule" u-is="generic" microID="/schedule/0">
        <div class="block">
          <h4 u-text="description"></h4>
          <span class="activeState" u-active="active"></span>
          <div class="form-group">
            <label>Start:</label>
            <span u-text="ontime">..</span>
          </div>
          <div class="form-group">
            <label>End:</label>
            <span u-text="offtime">..</span>
          </div>
          <span class="u-bool ux-value" u-active="value"></span>
        </div>
        <div class="block config Element"></div>
      </div>

      <div class="col card" u-control="digitalout" microID="/digitalout/led" u-is="generic">
        <div class="block">
          <h4 u-text="description"></h4>
          <span class="activeState" u-active="active"></span>
          <span class="u-bool ux-value" u-active="value"></span>
        </div>
      </div>

      <div class="col card" u-control="dht" microid="/dht/lr" u-is="generic">
        <div class="block">
          <h4 u-text="title"></h4>
          <span class="activeState" u-active="active"></span>
          <table>
            <tbody>
              <tr>
                <td style="font-size: 2rem"><span u-text="temperature">16.60</span>Â°C</td>
                <td style="width:1rem"></td>
                <td style="font-size: 2rem"><span u-text="humidity">45.20</span>%</td>
              </tr>
              <tr>
                <td>Temperature</td>
                <td></td>
                <td>Humidity</td>
              </tr>
            </tbody>
          </table>
        </div>
      </div>
    </div>

    <div id="u-templates" style="border:2px solid green;padding:1rem;display:none">
      <div u-control="kv" class="KV form-group"><label>${key}:</label><span u-text="${key}"></span></div>
    </div>
  </div>

  <script>
    var panelObj = document.getElementById('panel');

    function loadAsync(url, loadCallback, errorCallback) {
      var objHTTP = new XMLHttpRequest(); // new ActiveXObject("MSXML2.XMLHTTP");
      objHTTP.open('GET', url, true);
      objHTTP.addEventListener('readystatechange', function (p) {
        if (objHTTP.readyState == 4) {
          if (objHTTP.status >= 200 && objHTTP.status < 300) {
            loadCallback(objHTTP.responseText);
          } else {
            if (errorCallback) errorCallback(this);
          } // if
        } // if
      });
      objHTTP.send();
    } // loadAsync()

    function addValueInfo(path, key, value) {
      var hText;
      if (key && key != 'active' && path.match(/^\/.*\/.*/)) {
        var hElem = document.getElementById(path);
        if (hElem) {
          var elem = hElem.querySelector("[u-text='" + key + "']");
          if (!elem) {
            hElem = hElem.querySelector('.Element');
            if (hElem) {
              var p = {
                key: key
              };
              micro.insertTemplate(hElem, 'kv', p);
            }
          } // if
        } // if
      } // if
    } // addValueInfo

    hub.subscribe('/**/**?**', addValueInfo);

    function updateState() {
      loadAsync(
        '/$board',
        function (txt) {
          if (txt.length > 0) {
            hub.publishObj(JSON.parse(txt));
          }
        },
        null
      );
    } // updateState()

    function init() {
      loadAsync(
        '/config.json',
        function (txt) {
          if (txt.length > 0) {
            hub.publishObj(JSON.parse(txt));
            updateState();
          }
        },
        null
      );
      window.setInterval(updateState, 3800);
    } // init()

    window.addEventListener('load', init);
  </script>
</body>

</html>