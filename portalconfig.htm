<!doctype html>
<html lang="en">

<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />

  <title>HomeDing Portal Config</title>

  <link rel="icon" type="image/png" href="/favicon48.png" sizes="48x48">
  <meta name="application-name" content="Ding" />
  <meta name="msapplication-config" content="/browserconfig.xml" />
  <meta name="msapplication-TileColor" content="#2b5797" />
  <meta name="msapplication-TileImage" content="/favicon144.png" />
  <link rel="apple-touch-icon" sizes="180x180" href="/favicon180.png" />
  <meta name="mobile-web-app-capable" content="yes" />
  <link rel="manifest" href="/site.webmanifest" />
  <meta name="theme-color" content="#ffffff" />

  <link Content-Type="text/css" href="/iotstyle.css" rel="stylesheet" />

  <script src="/micro.js"></script>
  <style>
    html,
    body {
      height: 100%;
      width: 100%;
      margin: 0;
      padding: 0;
    }

    #ppage {
      display: flex;
      flex-direction: column;
      height: 100%;
      min-height: 100%;
    }

    #pbody {
      flex: 1;
      display: flex;
      flex-direction: row;
      background-color: silver;
    }

    main {
      flex: 1;
    }

    ul>hr {
      border: 0
    }

    ul>li {
      margin-bottom: 0.3em;
    }

    #devices>h3 {
      margin: 0.5rem 0;
    }

    #devices>div {
      margin: 0.2rem 0 0.2rem 1rem;
    }

    .card {
      height: 2rem;
      margin-bottom: 0.2rem;
    }
    .card .block {
background-color: bisque;
vertical-align:  top;
    }
    .card .block .icon {
      height: 1.6rem;
      width: 1.6rem;
    }
  </style>
</head>

<body>
  <div class="container-fluid">
    <div class="row u-header">
      <a href="/" title="Start-Page"><img class="icon" src="/favicon.svg" /></a>
      <h1>Portal Config</h1>
    </div>
    <nav class="navbar">
      <a class="button" href="/portal.htm">Portal</a>
    </nav>

    <div class="row wrap">
      <div class="col-6">
        <p>Select the elements to be shown on the portal board:</p>
      </div>
      <div id="devices" class="col-6"></div>
    </div>

  </div>

  <script>
    var devicesObj = document.querySelector('#devices');
    var devList = [];
    var devData = {};
    var uElements = {};

    function createUseElement(parentNode, iconName) {
      var svgObj = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
      svgObj.setAttribute('class', 'icon');

      var useObj = document.createElementNS('http://www.w3.org/2000/svg', 'use');
      useObj.setAttribute('href', 'icons.svg#' + iconName);
      svgObj.appendChild(useObj);
      parentNode.appendChild(svgObj);
      return (svgObj);
    }

    // initiate a fetch with JSON response expected.
    async function fetchJSON(url, options) {
      var p = fetch(url, options)
        .then(function (result) {
          return (result.json());
        });
      return (p)
    }

    function startContent() {
      if (devList.length > 0) {
        var deviceName = devList.pop();

        var deviceHeader = createHTMLElement(devicesObj, 'h3');
        deviceHeader.innerText = devData[deviceName].title + ' (' + deviceName + ')';

        var deviceRow = createHTMLElement(devicesObj, 'div', {class:'row wrap'});

        fetch('/api/config/' + deviceName)
          .then(function (result) {
            return result.json();
          })
          .then(function (data) {
            var url = 'http://' + devData[deviceName].host + '/api/state/';
            for (t in data) {
              for (i in data[t]) {
                if ((uElements[t]) && (!uElements[t].sys)) {
                  var cnfElem = data[t][i];
                  var divObj = createHTMLElement(deviceRow, 'div', { class: 'col card small' });
                  var bObj = createHTMLElement(divObj, 'div', { class: 'block' });

                  createUseElement(bObj, t);

                  var cbObj = createHTMLElement(bObj, 'input', { type: 'checkbox', title: url + t + '/' + i });
                  var titleText = cnfElem.title || cnfElem.description || '';
                  createHTMLElement(bObj, 'span').innerText = '(' + t + '/' + i + ') ' + titleText;
                }
              }
            }
            // pre.innerText = JSON.stringify(data, null, 2);
            window.setTimeout(startContent, 10);
          });

        // window.setTimeout(startContent, 10);
      }

    }

    function loadDevices() {
      var p2 = fetchJSON('/elements.json')
        .then(function (json) {
          uElements = json;
        });

      var p1 = fetch('/api/discovery')
        .then(function (result) {
          return result.json();
        })
        .then(function (data) {
          devData = data;
          devList = Object.keys(data);
        });

      Promise.allSettled([p1, p2]).then(function () {
        window.setTimeout(startContent, 10);
      });

    } // loadDevices()

    window.addEventListener('load', loadDevices);
  </script>
</body>

</html>