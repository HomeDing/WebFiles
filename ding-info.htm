<!DOCTYPE html>
<html>

<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Elements</title>
  <link Content-Type="text/css" href="/iotstyle.css" rel="stylesheet" />

  <style>
    .Element {
      font-size: 0.8em;
    }

    .card img.active {
      background-color: limegreen;
    }

    .Element .KV {
      display: block;
      clear: both;
      height: 1.5em;
    }

    .Element .Key,
    .Element .Value {
      display: inline-block;
      height: 1.4em;
      white-space: nowrap;
      overflow: hidden;
    }

    .Element .Key {
      width: 5.2rem;
      margin-right: 0.1rem;
      text-align: right;
    }

    .u-bar {
      position: relative;
      height: 1.4em;
      width: 100%;
      background-color: #aaaaaa;
    }

    .u-bar>.pulse,
    .u-bar>.current {
      display: inline-block;
      position: absolute;
    }

    .u-bar>.pulse {
      top: 0;
      left: 0;
      height: 1.4em;
      background-color: green
    }

    .u-bar>.current {
      top: 0.3em;
      height: 0.8em;
      background-color: red;
    }

    .u-indicator {
      position: absolute;
      top: 0.4rem;
      right: 0.4rem;
      height: 1.4rem;
      width: 1.4rem;
      border-radius: 0.7rem;
    }

    #modal {
      position: fixed;
      top: 0px;
      left: 0;
      width: 100%;
      height: 100%;
    }

    #modalBack {
      position: absolute;
      width: 100%;
      height: 100%;
      background-color: silver;
      opacity: 0.8;
    }

    #modalContainer {
      position: absolute;
      top: 0px;
      bottom: 0;
      left: 0px;
      right: 0;
      margin: auto;
      opacity: 1;
    }

    .modalClose {
      position: absolute;
      top: 0.4rem;
      right: 0.4rem;
      height: 1.8rem;
      width: 1.8rem;
      font-size: 1.6rem;
    }


    .form-group {
      margin-bottom: 0.4em
    }

    .form-group>label {
      display: inline-block;
      text-align: right;
      margin-bottom: 0.2rem;
      width: 8em;
    }

    .form-group>input,
    .form-group>select {
      width: 12em;
    }
  </style>
  <script src="polyfill.js"></script>
  <script src="es6-promise.auto.js"></script>
  <!-- <script src="https://cdn.jsdelivr.net/npm/es6-promise@4/dist/es6-promise.auto.js"></script> -->
  <script src="micro.js"></script>
  <script src="ding.js"></script>
</head>

<body>
  <div class="container">
    <div class="u-header">
      <a href="/" title="Startpage" ><img class="icon" src="/favicon.svg" /></a>
      <h1>Config</h1>
      <a href="/ding-ide.htm" title="Start IDE"><img class="icon" src="/i/ide.svg" /><span class="hidden-xs">IDE</span></a>
      <a href="/ding-info.htm" title="Start Config"><img class="icon" src="/i/config.svg" /><span class="hidden-xs">Config</span></a>
      <a href="/ding-log.htm" title="Logfile"><img class="icon" src="/i/log.svg" /><span class="hidden-xs">Log</span></a>
    </div>
    <div class="u-navbar">
      <button id="addButton">+</button>
      <button id="sysButton">sys</button>
    </div>

    <div id="panel" class="row wrap"></div>

    <div id="templates" style="border:2px solid green;padding:1rem;xdisplay:none">
      <div class='col' microControl='generic' id='${id}'>
        <div class="card" microBehavior='generic' microID='${id}'>
          <div class="block header">
            <h2><img src="/i/${type}.svg" class='Icon' />${id}</h2>
              <h4 property='description'></h4>
              <span class="u-indicator" property='active'></span>
          </div>
          <div class="block Element">
          </div>
        </div>
      </div>
      <hr />
      <div microControl='kv' class='KV'><span class='Key'>${key}:</span><span class='Value' property='${key}'></span></div>
      <hr />

      <div class='col' microControl='schedule' id='${id}'>
        <div class="card" microBehavior='generic' microID='${id}'>
          <div class="block header">
            <h2><img src="/i/schedule.svg" class='Icon' />${id}</h2>
              <h4 property='description'></h4>
              <span class="u-indicator" property='active'></span>
          </div>
          <div class="block">
            <label>Start:</label><input type="time" step="1" property="ontime">
            <td style="width:2rem"></td>
            <label>End:</label><input type="time" step="1" property="offtime">
            <label>out:</label><span property='value'></span>
          </div>
        </div>
      </div>

      <div microControl="modalNewElement" class="card">
        <div class="block header">
          <h2>Add a new Element</h2>
          <div class="modalClose" onclick='closeModal()' style="background-color: red;text-align: center">&#x00D7;</div>
        </div>
        <div class="block" style="font-size: 1.4">
          <div class="form-group">
            <label>Type:</label>
            <select name="type">
                <option disabled selected="selected">Please select...</option>
                <option value="button">button</option>
              <option>timer</option>
              <option>digitalout</option>
              <option>4</option>
              <option>5</option>
            </select>
          </div>
          <div class="form-group" style="margin-bottom: 0.4rem;">
            <label>ID:</label>
            <input placeholder="choose a name..." aria-label="theID" name="id">
          </div>
          </div>

          <hr />
          <div class="block">
            <button style="float:right" >Add</button>
          </div>
        </div>
      </div>

    </div>

    <div id="modal" class="hidden">
      <div id="modalBack"></div>
      <div onclick='closeModal()' style="position:absolute;background-color: cyan;padding:1rem">X</div>
      <div id="modalContainer" style="width:60px;height:60px">Hello, this is modal</div>
    </div>

    <script>
      var eObj = document.getElementById('atype/aname');
      var panelObj = document.getElementById('panel');
      var tempObj = document.getElementById('templates');
      var addObj = document.getElementById('addButton');
      var sysObj = document.getElementById('sysButton');

      var elementDef;
      var params = getHashParams({
        sys: false
      });
      window.addEventListener("hashchange", function () {
        window.location.reload();
      });

      function openModal(url, data) {
        var modalObj = document.getElementById('modal');
        var containerObj = document.getElementById('modalContainer');
        modalObj.classList.remove('hidden');

        var t = document.querySelector(".card[microControl='modalNewElement'");
        Promise.resolve(t.outerHTML)
          .then(function (html) {
            containerObj.innerHTML = html;
            containerObj.style.width = containerObj.scrollWidth + "px";
            containerObj.style.height = containerObj.scrollHeight + "px";
          });
      } // openModal

      function closeModal(data) {
        var modalObj = document.getElementById('modal');
        var containerObj = document.getElementById('modalContainer');
        modalObj.classList.add('hidden');
      }

      sysObj.addEventListener("click", function (evt) {
        params.sys = !toBool(params.sys);
        window.location.hash = "sys=" + params.sys;
      });

      addObj.addEventListener("click", function (evt) {
        openModal();
      });


      function createElement(path, key, value) {
        var hElem = document.getElementById(path);
        if (!hElem) {
          var t = path.split('/')[1];
          var p = {
            id: path,
            type: t
          };

          if (toBool(params.sys) || (!elementDef[t]) || (toBool(elementDef[t].sys) == false)) {
            var e = jcl.insertTemplate(panelObj, t, p);
            if (!e)
              var e = jcl.insertTemplate(panelObj, "generic", p);
          } // if
        } // if
      } // createElement()


      function addValueInfo(path, key, value) {
        var hText;
        if ((key) && (path.match(/^\/.*\/.*/))) {
          var hElem = document.getElementById(path);
          if (hElem) {
            var elem = hElem.querySelector("[property='" + key + "']");
            if (!elem) {
              hElem = hElem.querySelector(".Element");
              if (hElem) {
                var p = {
                  key: key
                };
                jcl.insertTemplate(hElem, "kv", p);
              }
            } // if
          } // if
        } // if
      } // addValueInfo

      hub.subscribe("/*/*", createElement);
      hub.subscribe("/**/**?**", addValueInfo);

      // get one resource after the other and do not request too much in parallel from the server.
      // template -> env.json -> config.json
      var p1 = fetch('/ding-templates.htm')
        .then(function (result) {
          return (result.text())
        }).then(function (html) {
          tempObj.insertAdjacentHTML('beforeend', html);
          jcl.loadTemplates(tempObj);

          return (fetch('/env.json'));
        }).then(function (result) {
          return (result.json())
        }).then(function (json) {
          hub.publishObj(json);

          return (fetch('/config.json'));
        }).then(function (result) {
          return (result.json())
        }).then(function (json) {
          hub.publishObj(json);
        });

      var p2 = fetch('/elements.json')
        .then(function (result) {
          return (result.json())
        }).then(function (json) {
          elementDef = json;
        });

      Promise.all([p1, p2]).then(function () {
        console.log("all done.");
        updateState();
        window.setInterval(updateState, 300);
      });

      function updateState() {
        fetch('/$board')
          .then(function (result) {
            return (result.json())
          }).then(function (json) {
            hub.publishObj(json);
          });
      }
    </script>

</body>

</html>