<!DOCTYPE html>
<html>

<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Elements</title>
  <link Content-Type="text/css" href="/iotstyle.css" rel="stylesheet" />

  <style>
    .Element {
      font-size: 0.8em;
    }

    .card img.active {
      background-color: limegreen;
    }

    .Element .KV {
      display: block;
      clear: both;
      height: 1.5em;
    }

    .Element .Key,
    .Element .Value {
      display: inline-block;
      height: 1.4em;
      white-space: nowrap;
      overflow: hidden;
    }

    .Element .Key {
      width: 5.2rem;
      margin-right: 0.1rem;
      text-align: right;
    }

    .u-bar {
      position: relative;
      height: 1.4em;
      width: 100%;
      background-color: #aaaaaa;
    }

    .u-bar>.pulse,
    .u-bar>.current {
      display: inline-block;
      position: absolute;
    }

    .u-bar>.pulse {
      top: 0;
      left: 0;
      height: 1.4em;
      background-color: green
    }

    .u-bar>.current {
      top: 0.3em;
      height: 0.8em;
      background-color: red;
    }

    .u-indicator {
      position: absolute;
      top: 0.4rem;
      right: 0.4rem;
      height: 1.4rem;
      width: 1.4rem;
      border-radius: 0.7rem;
    }
  </style>
  <script src="micro.js"></script>
  <script src="ding.js"></script>

  <!-- <script src="https://cdn.jsdelivr.net/npm/es6-promise@4/dist/es6-promise.auto.js"></script> -->
  <script src="es6-promise.auto.js"></script>

</head>

<body>
  <div class="container">
    <div class="u-header">
      <a href="/" title="Go to Startpage"><img class="icon" src="/favicon.svg" /></a>
      <h1>Config</h1>
      <a href="/ding-ide.htm" title="Start IDE"><img class="icon" 
          src="/i/ide.svg" /><span class="hidden-xs">IDE</span></a>
      <a href="/ding-info.htm" title="Start Config"><img class="icon" 
            src="/i/config.svg" /><span class="hidden-xs">Config</span></a>
    </div>
    <div class="u-navbar" style="">
      <button id="addButton">+</button>
    </div>

    <div id="panel" class="row wrap"></div>

    <div id="templates" class="row wrap" style="border:2px solid green;display:none">
      <div class='col' microControl='generic' id='${id}'>
        <div class="card" microBehavior='generic' microID='${id}'>
          <div class="block header">
            <h2><img src="/i/${type}.svg" class='Icon' />${id}</h2>
              <h4 property='description'></h4>
              <span class="u-indicator" property='active'></span>
          </div>
          <div class="block Element">
          </div>
        </div>
      </div>
      <div microControl='kv' class='KV'><span class='Key'>${key}:</span><span class='Value' property='${key}'></span></div>
    </div>


    <script>
      var eObj = document.getElementById('atype/aname');
      var panelObj = document.getElementById('panel');
      var tempObj = document.getElementById('templates');
      var addObj = document.getElementById('addButton');
      var elementDef;

      if (!window.xfetch) {
        // only fetch with GET methond and URL ist supported. No init parameter.
        // The returned Result is supporting .text() and .json() only.
        window.xfetch = function (url) {
          return new Promise(function (resolve, reject) {
            let xhr = new XMLHttpRequest();
            xhr.open('GET', url);
            xhr.onreadystatechange = function () {
              if (this.readyState === this.DONE) {
                if (this.status === 200) {
                  // Build object using a string with extensions.
                  var res = {
                    status: this.status,
                    _text: this.responseText
                  };
                  res.text = function () {
                    return (this._text)
                  };
                  res.json = function () {
                    return (JSON.parse(this._text))
                  };
                  resolve(res);
                } else {
                  reject(new Error('fetch: `' + url + '` failed with status: [' + this.status + ']'));
                }
              }
            };
            xhr.send();
          });
        }
      }

      addObj.addEventListener("click", function (evt) {
        alert(elementDef.types);
      });


      function createElement(path, key, value) {
        var hElem = document.getElementById(path);
        if (!hElem) {

          var p = {
            id: path,
            type: path.split('/')[1]
          };
          var e = jcl.insertTemplate(panelObj, p.type, p);
          if (!e)
            var e = jcl.insertTemplate(panelObj, "generic", p);
        } // if
      } // createElement()


      function setElement(path, key, value) {
        var hText;
        if ((key) && (path.match(/^\/.*\/.*/))) {
          var hElem = document.getElementById(path);

          var elems = hElem.querySelectorAll("[property='" + key + "']");

          if (elems.length == 0) {
            hElem = hElem.querySelectorAll(".Element")[0];
            if (hElem) {
              var p = {
                key: key
              };
              var e = jcl.insertTemplate(hElem, "kv", p);
              elems = hElem.querySelectorAll("[property='" + key + "']");
            }
          } // if

          // // update values
          // forAllNodeList(elems, function (e) {
          //   e.textContent = value;
          //   e.title = value;
          // });
        } // if
      } // setElement

      hub.subscribe("/*/*", createElement);
      hub.subscribe("/**/**?**", setElement);

      // get one resource after the other and do not request too much in parallel from the server.
      // template -> env.json -> config.json
      var p1 = fetch('/ding-templates.htm')
        .then(function (result) {
          return (result.text())
        }).then(function (html) {
          tempObj.insertAdjacentHTML('beforeend', html);
          jcl.loadTemplates(tempObj);

          return (fetch('/env.json'));
        }).then(function (result) {
          return (result.json())
        }).then(function (json) {
          hub.publishObj(json);

          return (fetch('/config.json'));
        }).then(function (result) {
          return (result.json())
        }).then(function (json) {
          hub.publishObj(json);
        });

      var p2 = fetch('/elements.json')
        .then(function (result) {
          return (result.json())
        }).then(function (json) {
          elementDef = json;
        });

      Promise.all([p1, p2]).then(function () {
        console.log("all done.");
        updateState();
        // window.setInterval(updateState, 2000);
      });

      function updateState() {
        fetch('/$board')
          .then(function (result) {
            return (result.json())
          }).then(function (json) {
            hub.publishObj(json);
          });
      }

      //   fetch("$board", ... 
      //  function (txt) {
      //     var obj = JSON.parse(txt);
      //     hub.publishObj(obj);
      //   });
      // } // updateState()

    </script>

  </div>
</body>

</html>