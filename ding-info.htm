<!DOCTYPE html>
<html>

<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Elements</title>
  <link Content-Type="text/css" href="/iotstyle.css" rel="stylesheet" />

  <style>
    .Element {
      font-size: 0.8em;
    }

    .card img.active {
      background-color: limegreen;
    }

    .Element .KV {
      display: block;
      clear: both;
      height: 1.5em;
    }

    .Element .Key,
    .Element .Value {
      display: inline-block;
      height: 1.4em;
      white-space: nowrap;
      overflow: hidden;
    }

    .Element .Key {
      width: 5.2rem;
      margin-right: 0.1rem;
      text-align: right;
    }

    .u-bar {
      position: relative;
      height: 1.4em;
      width: 100%;
      background-color: #aaaaaa;
    }

    .u-bar>.pulse,
    .u-bar>.current {
      display: inline-block;
      position: absolute;
    }

    .u-bar>.pulse {
      top: 0;
      left: 0;
      height: 1.4em;
      background-color: green
    }

    .u-bar>.current {
      top: 0.3em;
      height: 0.8em;
      background-color: red;
    }

    .activeState {
      position: absolute;
      top: 0.4rem;
      right: 0.4rem;
      height: 1.4rem;
      width: 1.4rem;
      background-image: url(/i/stop.svg);
      background-size: 1.4rem;
    }

    .activeState.active {
      background-image: url(/i/start.svg);
      background-size: 1.4rem;
    }

    .config {
      position: absolute;
      top: 0.4rem;
      right: 2.2rem;
      height: 1.4rem;
      width: 1.4rem;
      background-image: url(/i/config.svg);
      background-size: 1.4rem;
    }

      #modal {
      position: fixed;
      top: 0px;
      left: 0;
      width: 100%;
      height: 100%;
    }

    #modalBack {
      position: absolute;
      width: 100%;
      height: 100%;
      background-color: silver;
      opacity: 0.8;
    }

    #modalContainer {
      position: absolute;
      top: 0px;
      bottom: 0;
      left: 0px;
      right: 0;
      margin: auto;
      opacity: 1;
    }

    .modalClose {
      position: absolute;
      top: 0.4rem;
      right: 0.4rem;
      height: 1.8rem;
      width: 1.8rem;
      font-size: 1.6rem;
    }


    .form-group {
      margin-bottom: 0.4em
    }

    .form-group>label {
      display: inline-block;
      text-align: right;
      margin-bottom: 0.2rem;
      width: 8em;
    }

    .form-group>input,
    .form-group>select {
      width: 12em;
    }

    img, #panel {
      user-select: none;
      -ms-user-select: none;
    }
  </style>
  <script src="polyfill.js"></script>
  <script src="es6-promise.auto.js"></script>
  <!-- <script src="https://cdn.jsdelivr.net/npm/es6-promise@4/dist/es6-promise.auto.js"></script> -->
  <script src="micro.js"></script>
  <script src="ding.js"></script>
</head>

<body>
  <div class="container">
    <div class="u-header">
      <a href="/" title="Start-Page" ><img class="icon" src="/favicon.svg" /></a>
      <h1>Config</h1>
      <a href="/ding-ide.htm" title="Start IDE"><img class="icon" src="/i/ide.svg" /><span class="hidden-xs">IDE</span></a>
      <a href="/ding-info.htm" title="Start Config"><img class="icon" src="/i/config.svg" /><span class="hidden-xs">Config</span></a>
      <a href="/ding-log.htm" title="Logfile"><img class="icon" src="/i/log.svg" /><span class="hidden-xs">Log</span></a>
    </div>
    <div class="u-navbar">
      <button id="addButton">+</button>
      <button id="sysButton">sys</button>
    </div>

    <div id="panel" class='row wrap'></div>

    <div id="u-templates" style="border:2px solid green;padding:1rem;display:none">
      <div class='col card' u-control='generic' id='${id}' u-behavior='generic' microID='${id}'>
        <div class="block header">
          <h2><img src="/i/${type}.svg" class='Icon' />${id}</h2>
            <h4 u-text='description'></h4>
            <span class="activeState" u-active='active'></span>
            <span class="config"></span>
        </div>
        <div class="block Element">
        </div>
      </div>
      <hr />
      <div u-control='kv' class='KV'><span class='Key'>${key}:</span><span class='Value' u-text='${key}'></span></div>
      <hr />

      <div class='col card' u-control='schedule' id='${id}' u-behavior='generic' microID='${id}'>
        <div class="block header">
          <h2><img src="/i/schedule.svg" class='Icon' />${id}</h2>
            <h4 u-text='description'></h4>
            <span class="activeState" u-active='active'></span>
        </div>
        <div class="block">
          <label>Start:</label><input u-value="ontime" type="time" step="1">
          <span style="width:2rem"></span>
          <label>End:</label><input u-value="offtime" type="time" step="1">
          <label>out:</label><span u-text='value'></span>
        </div>
      </div>

    </div>

    <div id="modal" class="hidden">
      <div id="modalBack"></div>
      <div onclick='closeModal()' style="position:absolute;background-color: cyan;padding:1rem">X</div>
      <div id="modalContainer" style="width:60px;height:60px">Hello, this is modal</div>
    </div>
  </div>

  <script async>
    var eObj = document.getElementById('atype/aname');
    var panelObj = document.getElementById('panel');
    var addObj = document.getElementById('addButton');
    var sysObj = document.getElementById('sysButton');

    var elementDef;
    var params = getHashParams({
      sys: false
    });
    window.addEventListener("hashchange", function () {
      window.location.reload();
    });

    function openModal(url, data) {
      var modalObj = document.getElementById('modal');
      var containerObj = document.getElementById('modalContainer');
      modalObj.classList.remove('hidden');

      // open Dialog
      var dlgObj = jcl.insertTemplate(containerObj, 'modalNewElement');
      jcl.attach(dlgObj);

      // get implemented elements
      var p1 = fetch('/$elements')
        .then(function (result) {
          return (result.json())

        }).then(function (elList) {
          // fill options
          var sel = dlgObj.querySelector('.typeSelect');
          sel.innerHTML = '';
          elList.forEach(function (e) {
            var opt = document.createElement('option');
            opt.value = e;
            opt.textContent = e;
            sel.appendChild(opt);
          })
        });
    } // openModal

    function closeModal(data) {
      var modalObj = document.getElementById('modal');
      var containerObj = document.getElementById('modalContainer');
      modalObj.classList.add('hidden');
      containerObj.innerHTML = '';
    } // closeModal()


    sysObj.addEventListener("click", function (evt) {
      params.sys = !toBool(params.sys);
      window.location.hash = "sys=" + params.sys;
    });

    addObj.addEventListener("click", function (evt) {
      openModal();
    });


    function createElement(path, key, value) {
      var hElem = document.getElementById(path);
      if (!hElem) {
        var t = path.split('/')[1];
        var p = {
          id: path,
          type: t
        };

        if (toBool(params.sys) || (!elementDef[t]) || (toBool(elementDef[t].sys) == false)) {
          var e = jcl.insertTemplate(panelObj, t, p);
          if (!e)
            var e = jcl.insertTemplate(panelObj, "generic", p);
        } // if
      } // if
    } // createElement()

    function addValueInfo(path, key, value) {
      var hText;
      if ((key) && (key != 'active') && (path.match(/^\/.*\/.*/))) {
        var hElem = document.getElementById(path);
        if (hElem) {
          var elem = hElem.querySelector("[u-text='" + key + "']");
          if (!elem) {
            hElem = hElem.querySelector(".Element");
            if (hElem) {
              var p = {
                key: key
              };
              jcl.insertTemplate(hElem, "kv", p);
            }
          } // if
        } // if
      } // if
    } // addValueInfo

    hub.subscribe("/*/*", createElement);
    hub.subscribe("/**/**?**", addValueInfo);

    function updateState() {
      fetch('/$board')
        .then(function (result) {
          return (result.json())
        }).then(function (json) {
          hub.publishObj(json);
        });
    } // updateState()

    function init() {
      // load templates from other file.
      var p0 = Promise.all([
        jcl.loadFile('/ding-templates.htm'),
        jcl.loadFile('/ding-info-new.htm')
      ]);

      // element definitions -> env.json -> config.json
      var p1 = fetch('/elements.json')
        .then(function (result) {
          return (result.json())
        }).then(function (json) {
          elementDef = json;

          return (fetch('/env.json'));
        }).then(function (result) {
          return (result.json())
        }).then(function (json) {
          hub.publishObj(json);

          return (fetch('/config.json'));
        }).then(function (result) {
          return (result.json())
        }).then(function (json) {
          hub.publishObj(json);
        });

      Promise.all([p0, p1]).then(function () {
        updateState();
        window.setInterval(updateState, 800);
      });
    } // init()

    window.addEventListener('load', init);
  </script>

</body>

</html>