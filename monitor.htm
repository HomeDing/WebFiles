<!doctype html>
<html lang="en">

<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />

  <title>IoT HomeDing Monitor</title>

  <link rel="icon" type="image/png" href="/favicon48.png" sizes="48x48">
  <meta name="application-name" content="Ding" />
  <meta name="msapplication-config" content="/browserconfig.xml" />
  <meta name="msapplication-TileColor" content="#2b5797" />
  <meta name="msapplication-TileImage" content="/favicon144.png" />
  <link rel="apple-touch-icon" sizes="180x180" href="/favicon180.png" />
  <meta name="mobile-web-app-capable" content="yes" />
  <link rel="manifest" href="/site.webmanifest" />
  <meta name="theme-color" content="#ffffff" />
  <link rel="icon" type="image/png" href="/favicon48.png" sizes="48x48">

  <link Content-Type="text/css" href="/iotstyle.css" rel="stylesheet" />
  <script src="/micro.js"></script>
  <script src="/monitorTab.js"></script>
  <style>
    .dataTab {
      border-collapse: collapse;
      background-color: white;
      border: solid 1px #203050;
      padding: 0;
      color: #111111;
    }

    .dataTab tr:nth-child(even) {
      background: #ddd
    }

    .dataTab tr:nth-child(odd) {
      background: #eee
    }

    .dataTab td,
    .dataTab th {
      border: solid 1px #203050;
      padding: 0.25em 0.8em;
    }

    .dataTab thead th {
      background-color: #203050;
      color: white;
    }

    .dataTab thead th[sort] {
      cursor: pointer;
    }

    .remote img {
      width: 1em;
      height: 1em;
    }
  </style>
</head>

<body>
  <div class="container-fluid">
    <div class="row u-header">
      <a href="/" title="Startpage"><img class="icon" src="/i/device.svg" /></a>
      <h1>IoT HomeDing Monitor</h1>
    </div>

    <div class="row">
      <div class="col">
        <table is="table-sortable" id="devices" class="dataTab">
          <thead>
            <tr>
              <th>*</th>
              <th sort>hostname</th>
              <th sort>room</th>
              <th sort>title</th>
              <th>memory</th>
              <th sort=date>version</th>
              <th>uptime</th>
              <th>safemode</th>
            </tr>
          </thead>
          <tbody></tbody>
        </table>
      </div>
    </div>
  </div>

  <script>
    window.onerror = function (msg, url, lineNo, columnNo, error) {
    var string = msg.toLowerCase();
    var substring = 'script error';
    if (string.indexOf(substring) > -1) {
    alert('Script Error: See Browser Console for Detail');
    } else {
    var message = [
    'Message: ' + msg,
    'URL: ' + url,
    'Line: ' + lineNo,
    'Column: ' + columnNo,
    'Error object: ' + JSON.stringify(error)
    ].join(' - ');

    alert(message);
    }

    return false;
    };
  </script>

  <script>
    var devices;
    var remotes = []; // document.querySelectorAll('.remote');
    var remoteIndex = 0;

    var state = 0;

    function addDevice(name, data) {
      var tab = document.querySelector('#devices tbody');
      var r = tab.insertRow(-1);
      var c, o;
      r.className = "remote";

      c = r.insertCell(-1);
      createHTMLElement(c, 'img', { class: 'status', src: 'i/stop.svg' });

      c = r.insertCell(-1);
      createHTMLElement(c, 'a', { href: 'http://' + name }).innerText = name;

      c = r.insertCell(-1);
      c.innerText = data.room || '';

      c = r.insertCell(-1);
      c.innerText = data.title;
      c.title = JSON.stringify(data, null, 2);

      c = r.insertCell(-1);
      c.className = 'memory';

      c = r.insertCell(-1);
      c.className = 'version';

      c = r.insertCell(-1);
      c.className = 'uptime';

      c = r.insertCell(-1);
      c.className = 'safemode';
    } // addDevice()


    function loadDevices() {
      fetch('/api/discovery')
        .then(function (result) {
          return result.json();
        })
        .then(function (json) {
          devices = Object.keys(json);
          for (var n = 0; n < devices.length; n++) {
            addDevice(devices[n], json[devices[n]]);
          }
          window.setTimeout(updateNext, 10);
        });
    } // loadDevices()


    function updateNext() {
      if (remoteIndex === 0) {
        remotes = document.querySelectorAll('.remote');
      }
      var obj = remotes[remoteIndex];

      if (remoteIndex >= remotes.length) {
        remoteIndex = 0;
        window.setTimeout(updateNext, 8000);

      } else {
        var hostname = devices[remoteIndex];
        var statImg = obj.querySelector('img.status');

        statImg.src = 'i/config.svg';

        fetch('http://' + hostname + '/$sysinfo', {})
          .then(function (response) {
            if (response.status === 200) {
              return response.json();
            }
          })
          .then(function (si) {
            // alert(JSON.stringify(si, null, 2));
            var d = new Date(si.upTime * 1000);

            statImg.src = 'i/start.svg';
            obj.querySelector('.memory').textContent = si.freeHeap;
            obj.querySelector('.version').textContent = new Date(si.build).toISOString().split(/[T\.]/)[0];
            obj.querySelector('.uptime').textContent = d.toISOString().split(/[T\.]/)[1];
            obj.querySelector('.safemode').textContent = si.safemode;
          })
          .catch(function (err) {
            statImg.src = 'i/stop.svg';
            obj.querySelector('.memory').textContent = '-';
            obj.querySelector('.uptime').textContent = '-';
            obj.querySelector('.safemode').textContent = '-';
          })
          .finally(function () {
            remoteIndex++;
            window.setTimeout(updateNext, 200);
          });
      } // if
    } // updateNext()

    window.addEventListener('load', function () {
      state = 'l'; // load devices
      window.setTimeout(loadDevices, 400);
    });
  </script>
</body>

</html>