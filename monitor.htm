<!doctype html>
<html lang="en">

<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>IoT HomeDing Monitor</title>
  <link rel="icon" type="image/png" href="/favicon48.png" sizes="48x48">
  <link Content-Type="text/css" href="/iotstyle.css" rel="stylesheet" />
  <script src="/micro.js"></script>
  <script src="/monitorTab.js"></script>
  <style>
    .dataTab {
      border-collapse: collapse;
      background-color: white;
      border: solid 1px #203050;
      padding: 0;
      color: #111111;
    }

    .dataTab tr:nth-child(even) {
      background: #ddd
    }

    .dataTab tr:nth-child(odd) {
      background: #eee
    }

    .dataTab td,
    .dataTab th {
      border: solid 1px #203050;
      padding: 0.25em 0.8em;
    }

    .dataTab thead th {
      background-color: #203050;
      color: white;
    }

    .dataTab thead th[sort] {
      cursor: pointer;
    }

    .remote img {
      width: 1em;
      height: 1em;
    }
  </style>
</head>

<body>
  <div class="container-fluid">
    <div class="row u-header">
      <a href="/" title="Startpage"><svg class="icon"><use href="./icons.svg#device"/></svg></a>
      <h1>IoT HomeDing Monitor</h1>
    </div>

    <div class="row">
      <div class="col">
        <table is="table-sortable" id="devices" class="dataTab">
          <thead>
            <tr>
              <th>*</th>
              <th sort>hostname</th>
              <th sort>room</th>
              <th sort>title</th>
              <th>memory</th>
              <th sort>core</th>
              <th sort=date>date</th>
              <th>uptime</th>
              <th sort>flash</th>
              <th>safemode</th>
            </tr>
          </thead>
          <tbody></tbody>
        </table>
      </div>
    </div>
  </div>

  <script>
    window.onerror = function (msg, url, lineNo, columnNo, error) {
      var string = msg.toLowerCase();
      var substring = 'script error';
      if (string.indexOf(substring) > -1) {
        alert('Script Error: See Browser Console for Detail');
      } else {
        var message = [
          'Message: ' + msg,
          'URL: ' + url,
          'Line: ' + lineNo,
          'Column: ' + columnNo,
          'Error object: ' + JSON.stringify(error)
        ].join(' - ');
        alert(message);
      }
      return false;
    };
  </script>

  <script>
    const param = {
      REFRESHSTATE: 12 * 1000, // refresh the state of all devices
      REFRESHLIST: 5 * 60 * 1000, // refresh the list of devices
      FETCHTIMEOUT: 3 * 1000
    };

    var devices;
    var deviceInfo;
    var needLoadDevices = true;
    var remotes = []; // document.querySelectorAll('.remote');
    var remoteIndex = 0;

    var state = 0;

    function addDevice(name, data) {
      var tab = document.querySelector('#devices tbody');

      // find existing row for device
      var r = tab.querySelector('tr[host="' + name + '"]');
      if (!r) {
        var r = tab.insertRow(-1);
        r.className = 'remote';
        r.setAttribute('host', name);

        var c;

        // c = r.insertCell(-1);
        createHTMLElement(r.insertCell(-1), 'img', { class: 'status', src: 'i/no.svg' });
        createHTMLElement(r.insertCell(-1), 'a', { href: 'http://' + name }).innerText = name;
        r.insertCell(-1).innerText = data.room || '';

        c = r.insertCell(-1);
        c.innerText = data.title;
        c.title = JSON.stringify(data, null, 2);

        r.insertCell(-1).className = 'memory';
        r.insertCell(-1).className = 'core';
        r.insertCell(-1).className = 'date';
        r.insertCell(-1).className = 'uptime';
        r.insertCell(-1).className = 'flash';
        r.insertCell(-1).className = 'safemode';
      } // if

    } // addDevice()


    function loadDevices() {
      fetch('/api/discovery')
        .then(function (result) {
          return result.json();
        })
        .then(function (json) {

          // all discovered devices are active
          for (a in json) { json[a].active = true; }

          // add old devices from localstorage.
          var od = JSON.parse(localStorage.getItem('devices'));
          for (e in od) {
            if (! json[e]) {
              // add known, inactive device
              var o = od[e];
              delete (o.ts);
              delete (o.path);
              o.active = false;
              json[e] = o;
            }
          }
          localStorage.setItem('devices', JSON.stringify(json));

          deviceInfo = json;
          devices = Object.keys(json);
          devices.sort();
          for (var n = 0; n < devices.length; n++) {
            if (devices[n]) addDevice(devices[n], json[devices[n]]);
          }

          window.setTimeout(updateNext, 10);
        });
    } // loadDevices()


    function updateNext() {

      if (remoteIndex === 0) {
        if (needLoadDevices) {
          needLoadDevices = false;
          loadDevices();
          return;
        } // if
        remotes = document.querySelectorAll('.remote');
      } // if

      if (remoteIndex >= remotes.length) {
        remoteIndex = 0;
        window.setTimeout(updateNext, param.REFRESHSTATE);

      } else {
        var obj = remotes[remoteIndex];

        // var hostname = devices[remoteIndex];
        var host = obj.cells[1].textContent;

        var t = deviceInfo[host];

        var statImg = obj.querySelector('img.status');

        if (!t.active) {
          statImg.src = 'i/stop.svg';
          remoteIndex++;
          window.setTimeout(updateNext, 50);

        } else {
          statImg.src = 'i/config.svg';
          const controller = new AbortController();
          window.setTimeout(function () { controller.abort() }, param.FETCHTIMEOUT);

          fetch('http://' + host + '/$sysinfo', { signal: controller.signal })
            .then(function (response) {
              if (response.status === 200) {
                return response.json();
              }
            })
            .then(function (si) {
              // alert(JSON.stringify(si, null, 2));
              var d = new Date(si.upTime * 1000);

              statImg.src = 'i/start.svg';
              obj.querySelector('.memory').textContent = si.freeHeap;
              obj.querySelector('.core').textContent = (si.coreBuild || '').replace('.ino', '') + ' ' + (si.coreVersion || '');
              obj.querySelector('.date').textContent = new Date(si.build).toISOString().split(/[T\.]/)[0];
              obj.querySelector('.uptime').textContent = d.toISOString().split(/[T\.]/)[1];
              obj.querySelector('.flash').textContent = si.flashSize;
              obj.querySelector('.safemode').textContent = si.safemode;
            })
            .catch(function (err) {
              statImg.src = 'i/stop.svg';
              obj.querySelector('.memory').textContent = '-';
              obj.querySelector('.uptime').textContent = '-';
              obj.querySelector('.safemode').textContent = '-';
              t.active = false;
            })
            .finally(function () {
              remoteIndex++;
              window.setTimeout(updateNext, 200);
            });
        } // if
      } // if
    } // updateNext()

    window.addEventListener('load', function () {
      state = 'l'; // load devices
      window.setTimeout(updateNext, 400);
      window.setInterval(function () {
        needLoadDevices = true;
      }, param.REFRESHLIST);
    });
  </script>
</body>

</html>