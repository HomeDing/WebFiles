<!doctype html>
<html lang="en">

<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Board</title>
  <link rel="icon" type="image/png" href="/favicon48.png" sizes="48x48">
  <meta name="application-name" content="Ding" />
  <meta name="msapplication-config" content="/browserconfig.xml" />
  <meta name="msapplication-TileColor" content="#2b5797" />
  <meta name="msapplication-TileImage" content="/favicon144.png" />
  <link rel="apple-touch-icon" sizes="180x180" href="/favicon180.png" />
  <meta name="mobile-web-app-capable" content="yes" />
  <link rel="manifest" href="/site.webmanifest" />
  <meta name="theme-color" content="#ffffff" />
  <link rel="icon" type="image/png" href="/favicon48.png" sizes="48x48">

  <link Content-Type="text/css" href="/iotstyle.css" rel="stylesheet" />

  <style>
    svg.setconfig {
      position: absolute;
      top: 0.5rem;
      right: 0.5rem;
      height: 1.4rem;
      width: 1.4rem;
      background-size: 1.4rem;
    }

    img,
    #panel {
      -ms-user-select: none;
      user-select: none;
    }
  </style>
  <script src="/micro.js"></script>
</head>

<body>
  <div class="container-fluid">
    <div class="row u-header">
      <h1>Board</h1>
    </div>
    <div class="row u-navbar">
      <a class="button" href="/">Home</a>
      <a class="button" href="/board.htm">Board</a>
      <a class="button" href="/microide.htm">IDE</a>
      <a class="button" href="/log.htm">Log</a>
      <span class="gap"></span>
      <button id="sysButton">sys</button>
      <button id="addButton">+</button>
    </div>

    <div id="panel" class="row wrap"></div>

    <div id="u-templates" style="display:none">

      <div u-control="modal" u-is="modal">
        <div class="modalBack" u-action="close"></div>
        <div class="modalFrame" class="modal-object"></div>
      </div>

      <div class="cHead block header">
        <svg class="icon">
          <use href="./icons.svg#${type}" />
        </svg>
        <h3 u-text="title" class="setfocus"></h3>
        <h4 u-text="description"></h4>
        <svg class="setconfig">
          <use href="./icons.svg#config" />
        </svg>
      </div>

      <div class="col card" u-control="generic" u-is="generic" microID="${id}">
        <div u-is="include" ref=".cHead"></div>
        <div class="block">
          <div class="form-grid"><label>Value:</label><span u-text="value"></span></div>
        </div>
      </div>

      <form method="dialog" class="col card" u-control="schedule" id="${id}" u-is="generic" microID="${id}">
        <div u-is="include" ref=".cHead"></div>
        <span class="u-bool ux-value" u-active="value" style="top:2rem;"></span>
        <fieldset class="block btn-group">
          <legend>Mode</legend>
          <label><input name="mode" u-value="mode" type="radio" value="off">Off</label>
          <label><input name="mode" u-value="mode" type="radio" value="on">On</label>
          <label><input name="mode" u-value="mode" type="radio" value="timer">Timer</label>
        </fieldset>
        <div class="block">
          <div class="form-grid">
            <label>Start:</label><span u-text="ontime"></span>
            <label>End:</label><span u-text="offtime"></span>
          </div>
        </div>
      </form>

      <div class="col card" u-control="dstime" id="${id}" u-is="dstime" microID="${id}">
        <div u-is="include" ref=".cHead"></div>
        <div class="block">
          <div class="form-grid">
            <label>ReadTime:</label><input u-value="readtime" type="time" step="1" />
            <label>Now:</label><span u-text="now"></span>
            <label>set Time:</label><span class="now"></span>
          </div>
          <div class="block footer">
            <button style="float:right">set</button>
          </div>
        </div>
      </div>

      <div class="col card" u-control="switch" id="${id}" u-is="generic" microID="${id}">
        <div u-is="include" ref=".cHead"></div>
        <div class="block">
          <span class="u-bool ux-value border" u-active="value"></span>
          <div u-is="input">
            <label class="down">off</label>
            <input class="switch" u-value="value" type="range">
            <label class="up">on</label>
          </div>
        </div>
      </div>

      <div class="col card" u-control="value" id="${id}" u-is="generic" microID="${id}">
        <div u-is="include" ref=".cHead"></div>
        <div class="block form-grid">
          <label>value:</label>
          <span u-is="input">
            <input type="range" u-value="value"><span u-text="value"></span></span>
        </div>
      </div>

      <div class="col card" u-control="logic" id="${id}" u-is="generic" microID="${id}">
        <div u-is="include" ref=".cHead"></div>
        <div class="block">
          <span class="u-bool ux-value" u-active="value"></span>
          <div class="form-grid"><label>value:</label><span u-text="value"></span></div>
        </div>
      </div>

      <div class="col card" u-control="rfcodes" microID="${id}" u-is="generic">
        <div u-is="include" ref=".cHead"></div>
        <div class="block Element">
          <div><label>Last Code:</label></div>
          <pre>[<span u-text="value" style="user-select: text;"></span>]</pre>
        </div>
      </div>

      <div class="col card" u-control="color" id="${id}" u-is="color" microID="${id}">
        <div u-is="include" ref=".cHead"></div>
        <div class="block form-grid">
          <label>value:</label>
          <div><span class="color border" style="display:inline-block; height:100%;width:6rem;"></span><span u-text="value"></span></div>
          <input type="range" max="359" class="wide band hue">
          <input type="range" max="100" class="wide band saturation" u-value="saturation">
          <input type="range" max="100" class="wide band lightness" u-value="lightness">
          <input type="range" max="255" class="wide band white">
        </div>
        <div class="block footer">
          <button u-action="mode" value="fade">fade</button><button u-action="mode" value="fix">fix</button><button u-action="mode" value="pulse">pulse</button><button u-action="mode" value="wheel">wheel</button>
        </div>
      </div>

      <div class="col card" u-control="light" id="${id}" u-is="generic" microID="${id}">
        <div u-is="include" ref=".cHead"></div>
        <div class="block">
          <span u-color="value" class="border" style="width:4rem;height:4rem;float:right;border-radius:50%;"></span>
          <div class="form-grid"><label>value:</label><span u-text="value"></span></div>
          <div class="form-grid"><label>brightness:</label><span u-text="brightness"></span></div>
        </div>
      </div>

      <div class="col card" u-control="tm1637" id="${id}" u-is="generic" microID="${id}">
        <div u-is="include" ref=".cHead"></div>
        <div class="block">
          <div style="text-align: center;"><span u-text="value" style="font-size:4rem;font-style: italic;"></span></div>
          <div class="form-grid"><label>brightness:</label><span u-text="brightness"></span></div>
        </div>
      </div>

      <div class="col card" u-control="ina2xx" id="${id}" u-is="generic" microID="${id}">
        <div u-is="include" ref=".cHead"></div>
        <div class="block">
          <div class="form-grid"><label>Voltage:</label><span u-text="voltage"></span></div>
          <div class="form-grid"><label>Current:</label><span u-text="current"></span></div>
          <div class="form-grid"><label>Power:</label><span u-text="power"></span></div>
        </div>
      </div>

      <div class="col card" u-control="bl0937" id="${id}" u-is="bl0937" microID="${id}">
        <div u-is="include" ref=".cHead"></div>
        <div class="block">
          <table style="width:100%;font-size:2rem">
            <tr>
              <td>
                <span u-text="power"></span> W
              </td>
              <td style="display:none">
                <span u-text="current"></span> mA
              </td>
              <td style="display:none">
                <span u-text="voltage"></span> V
              </td>
            </tr>
          </table>
          mode: <button u-action="mode" value="current">current</button>
          <button u-action="mode" value="voltage">voltage</button>
        </div>
      </div>

    </div>
  </div>

  <script>
    var panelObj = document.getElementById('panel');
    var addObj = document.getElementById('addButton');
    var sysObj = document.getElementById('sysButton');
    var refreshState = ''; // nothing in progress
    var updateTimer;
    var DEBUG_STARTTIME = Date.now();

    var REFRESH_IDLEINTERVALL = 4000;

    // Element definitions and list of implemented elements
    var uElements = {
      defs: {},
      impl: [],
      env: {},
      config: {}
    }

    var params = getHashParams({
      sys: false
    });
    window.addEventListener('hashchange', function () {
      window.location.reload();
    });

    sysObj.addEventListener('click', function (evt) {
      params.sys = !toBool(params.sys);
      window.location.hash = 'sys=' + params.sys;
    });

    addObj.addEventListener('click', function (evt) {
      ModalDialogClass.open('newelementdlg');
    });

    // Element type reuse
    var alias = {
      "sht20": "dht",
      "displayssd1306": "displayoled",
      "displaysh1106": "displayoled",
      "neo": "light", "and": "logic", "or": "logic",
      "ina219": "ina2xx", "ina226": "ina2xx"
      // ,
      // "my9291": "light"
    };

    hub.subscribe('/*/*', function (path, key, value) {
      if (path) {
        path = path.toLowerCase();
        var hElem = document.querySelector("[microID='" + path + "']");
        if (!hElem) {
          // create a new card
          var t = path.split('/')[1];
          var p = {
            id: path,
            type: t,
            icon: t
          };

          var def = uElements.defs[t];
          if (toBool(params.sys) || !def || toBool(def.sys) == false) {
            if ((def) && (def.icon)) {
              p.icon = def.icon;
            }
            var e = micro.insertTemplate(panelObj, t, p);
            if (!e) {
              t = alias[t] || 'generic';
              e = micro.insertTemplate(panelObj, t, p);
            }
          } // if
        } // if
      } // if
    }); // create new card

    hub.subscribe('/device/*?name', function (path, key, value) {
      document.title = value;
      document.querySelector("meta[name=application-name]").content = value;
    });


    /**
    * @param {number} timeout time to next fetch in msecs.
    */
    function updateAsap(timeout) {
      if (!timeout) timeout = 50;

      if (refreshState == 'w') {
        window.clearTimeout(updateTimer);
        refreshState = '';
      }

      if (refreshState == '') {
        refreshState = 'w';
        updateTimer = window.setTimeout(
          function () {
            refreshState = 'f';
            fetch('/$board')
              .then(raw => raw.json())
              .then(json => hub.publishObj(json))
              .finally(() => {
                refreshState = '';
                updateAsap(REFRESH_IDLEINTERVALL);
              });
          }, timeout);
      }
    } // updateAsap()


    // initiate a fetch with JSON response expected.
    async function fetchJSON(url, options) {
      var p = fetch(url, options)
        .then(raw => raw.json());
      return (p)
    }

    function init() {
      // load templates from other file.
      var p0 = micro.loadFile('/board-templates.htm');

      var p2 = fetchJSON('/elements.json')
        .then(json => uElements.defs = json);

      var p3 = fetchJSON('/env.json')
        .then(json => uElements.env = json);

      var p4 = fetchJSON('/config.json')
        .then(json => uElements.config = json);

      Promise.allSettled([p0, p2, p3, p4]).then(function () {
        // env data should be published before config data
        if (uElements.env) {
          hub.write('env', JSON.stringify(uElements.env));
          hub.publishObj(uElements.env);
        }
        if (uElements.config) {
          const c = uElements.config;
          // adjust title locally
          for (var t in c) for (var i in c[t]) {
            if (!c[t][i].title) c[t][i].title = t + '/' + i;
          }
          hub.write('config', JSON.stringify(c));
          hub.publishObj(c);
        }

        // defer metadata and dialogs
        fetchJSON('/$elements')
          .then(json => uElements.impl = json);
        micro.loadFile('/board-new.htm');
        updateAsap();
      });
    } // init()

    window.addEventListener('load', init);

    if (window !== window.top) {
      // disable header and navbar in portal mode.
      document.querySelector('.u-header').style.display = 'none';
      document.querySelector('.u-navbar').style.display = 'none';
    } // if
  </script>
</body>

</html>