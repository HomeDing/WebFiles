<!doctype html>
<html lang="en">

<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Board</title>
  <link rel="icon" type="image/png" href="/favicon48.png" sizes="48x48">
  <meta name="application-name" content="Ding" />
  <meta name="msapplication-config" content="/browserconfig.xml" />
  <meta name="msapplication-TileColor" content="#2b5797" />
  <meta name="msapplication-TileImage" content="/favicon144.png" />
  <link rel="apple-touch-icon" sizes="180x180" href="/favicon180.png" />
  <meta name="mobile-web-app-capable" content="yes" />
  <link rel="manifest" href="/site.webmanifest" />
  <meta name="theme-color" content="#ffffff" />

  <link Content-Type="text/css" href="/iotstyle.css" rel="stylesheet" defer />
  <script src="/micro.js" defer></script>
  <script src="/sfc/loader.js"></script>
  <script>
    var allSFCLoaded = window.loadComponent('u-toast,u-linechart');
  </script>
  <style>
    svg.setconfig {
      position: absolute;
      top: 0.5rem;
      right: 0.5rem;
      height: 1.4rem;
      width: 1.4rem;
      background-size: 1.4rem;
    }

    svg.fullscreen {
      position: absolute;
      top: 0.5rem;
      right: 2.5rem;
      height: 1.4rem;
      width: 1.4rem;
      background-size: 1.4rem;
    }

    img,
    #panl {
      user-select: none;
    }

    select:invalid,
    input:invalid {
      border-color: red;
    }
  </style>
</head>

<body class="sitelayout" style="width:100%;--layout-gap: 0;--main-back:transparent">
  <u-toast></u-toast>
  <header>
    <h1>Board</h1>
  </header>
  <nav class="navbar">
    <a href="/">Home</a>
    <a href="/board.htm">Board</a>
    <a href="/microide.htm">IDE</a>
    <a href="/log.htm">Log</a>
    <span class="gap"></span>
    <button id="sysButton">sys</button>
    <button id="addButton">+</button>
  </nav>

  <main >
    <div id="panl" class="card-container col365" style="--card-height: auto;">
    </div>
  </main>

  <div id="u-templates" style="display:none">

    <div u-control="modal" u-is="modal">
      <div class="modalBack" u-action="close"></div>
      <div class="modalFrame" class="modal-object"></div>
    </div>

    <div class="cHead header">
      <svg class="icon">
        <use href="./icons.svg#${type}" />
      </svg>
      <h3 u-text="title"></h3>
      <h4 u-text="description"></h4>
      <svg class="setconfig">
        <use href="./icons.svg#config" />
      </svg>
    </div>

    <div class="card" u-control="generic" u-is="generic" microID="${id}">
      <div u-is="include" ref=".cHead"></div>
      <div class="main">
        <div class="form-grid"><label>Value:</label><output u-text="value"></output></div>
      </div>
    </div>

    <form method="dialog" class="card" u-control="schedule" id="${id}" u-is="generic" microID="${id}">
      <div u-is="include" ref=".cHead"></div>
      <span class="u-bool ux-value" u-active="value" style="top:2rem;"></span>
      <fieldset class="block btn-group">
        <legend>Mode</legend>
        <label><input name="mode" u-value="mode" type="radio" value="off">Off</label>
        <label><input name="mode" u-value="mode" type="radio" value="on">On</label>
        <label><input name="mode" u-value="mode" type="radio" value="timer">Timer</label>
      </fieldset>
      <div class="main">
        <div class="form-grid">
          <label>Start:</label><output u-text="ontime"></output>
          <label>End:</label><output u-text="offtime"></output>
        </div>
      </div>
    </form>

    <div class="card" u-control="dstime" id="${id}" u-is="dstime" microID="${id}">
      <div u-is="include" ref=".cHead"></div>
      <div class="main">
        <div class="form-grid">
          <label>ReadTime:</label><input u-value="readtime" type="time" step="1" />
          <label>Now:</label><output u-text="now"></output>
          <label>set Time:</label><output class="now"></output>
        </div>
        <div class="footer">
          <button style="float:right">set</button>
        </div>
      </div>
    </div>

    <div class="card" u-control="switch" id="${id}" u-is="generic" microID="${id}">
      <div u-is="include" ref=".cHead"></div>
      <div class="main">
        <span class="u-bool ux-value border" u-active="value"></span>
        <div u-is="input">
          <span class="down">off</span>
          <input id="${id}O" class="switch" u-value="value" type="range">
          <span class="up">on</span>
        </div>
      </div>
    </div>

    <div class="card" u-control="value" id="${id}" u-is="value" microID="${id}">
      <div u-is="include" ref=".cHead"></div>
      <div class="block form-grid">
        <label>value:</label>
        <span u-is="input">
          <input type="range" u-value="value"><output u-text="value"></output></span>
      </div>
    </div>

    <div class="card" u-control="logic" id="${id}" u-is="generic" microID="${id}">
      <div u-is="include" ref=".cHead"></div>
      <div class="main">
        <span class="u-bool ux-value" u-active="value"></span>
        <div class="form-grid"><label>value:</label><output u-text="value"></output></div>
      </div>
    </div>

    <div class="card" u-control="select" id="${id}" u-is="select" microID="${id}">
      <div u-is="include" ref=".cHead"></div>
      <div class="main">
        <select></select>
      </div>
    </div>

    <div class="card" u-control="rfcodes" microID="${id}" u-is="generic">
      <div u-is="include" ref=".cHead"></div>
      <div class="main">
        <div><label>Last Code:</label></div>
        <pre>[<span u-text="value" style="user-select: text;"></span>]</pre>
      </div>
    </div>

    <div class="card" u-control="color" id="${id}" u-is="color" microID="${id}">
      <div u-is="include" ref=".cHead"></div>
      <div class="block form-grid">
        <label>value:</label><output name="value"></output>
        <label>color:</label><input type="color" name="color">
        <label style="display:none">white:</label>
        <div style="display:none"><input type="range" max="255" name="white"><output name="white"></output></div>
        <label>brightness:</label>
        <div><input type="range" max="100" name="brightness"><output name="brightness"></output></div>
        <label>duration:</label>
        <div><input type="range" max="12000" step="100" name="duration"><output name="duration"></output></div>
      </div>
      <div class="footer form-actions">
        <button u-action="mode" value="fade">fade</button>
        <button u-action="mode" value="fix">fix</button>
        <button u-action="mode" value="pulse">pulse</button>
        <button u-action="mode" value="wheel">wheel</button>
      </div>
    </div>

    <div class="card" u-control="stripe" id="${id}" u-is="generic" microID="${id}">
      <div u-is="include" ref=".cHead"></div>
      <div class="block form-grid">
        <label>mode:</label><output u-text="mode"></output>
        <label>duration:</label>
        <div><input type="range" max="20000" step="100" u-value="duration" u-units="ms"><output u-value="duration"></output></div>
        <label>Effect Length:</label>
        <div><input type="range" max="255" u-value="effectlength"><output u-value="effectlength"></output></div>
      </div>
      <div class="footer form-actions">
        <button u-action="mode" value="flow">flow</button>
      </div>
    </div>

    <div class="card" u-control="light" id="${id}" u-is="generic" microID="${id}">
      <div u-is="include" ref=".cHead"></div>
      <div class="main">
        <span u-color="value" class="border" style="width:4rem;height:4rem;float:right;border-radius:50%;"></span>
        <div class="form-grid"><label>value:</label><output u-text="value"></output>
          <label>brightness:</label><output u-text="brightness"></output>
        </div>
      </div>
    </div>

    <div class="card" u-control="tm1637" id="${id}" u-is="generic" microID="${id}">
      <div u-is="include" ref=".cHead"></div>
      <div class="main">
        <div style="text-align: center;"><span u-text="value" style="font-size:4rem;font-style: italic;"></span></div>
        <div class="form-grid"><label>brightness:</label><output u-text="brightness"></output></div>
      </div>
    </div>

    <div class="card" u-control="ina2xx" id="${id}" u-is="generic" microID="${id}">
      <div u-is="include" ref=".cHead"></div>
      <div class="block form-grid">
        <label>Voltage:</label><output u-text="voltage"></output>
        <label>Current:</label><output u-text="current"></output>
        <label>Power:</label><output u-text="power"></output>
      </div>
    </div>

    <div class="card" u-control="bl0937" id="${id}" u-is="bl0937" microID="${id}">
      <div u-is="include" ref=".cHead"></div>
      <div class="main">
        <table style="width:100%;font-size:2rem">
          <tr>
            <td>
              <span u-text="power"></span> W
            </td>
            <td style="display:none">
              <span u-text="current"></span> mA
            </td>
            <td style="display:none">
              <span u-text="voltage"></span> V
            </td>
            <td>
              <span u-text="energy"></span> Wh
            </td>
          </tr>
        </table>
        mode: <button u-action="mode" value="current">current</button>
        <button u-action="mode" value="voltage">voltage</button>
      </div>
    </div>

    <div class="card" u-control="radio" id="${id}" u-is="generic" microID="${id}">
      <div u-is="include" ref=".cHead"></div>
      <div class="block form-grid">
        <label>Frequency:</label>
        <span>
          <output u-text="frequency" style="width: 7ch;"></output>
          <button u-action="seek" value="0">&lt;&lt;</button>
          <button u-action="seek" value="1">&gt;&gt;</button>
        </span>
        <label>RSSI:</label><output u-text="rssi"></output>
        <label>SNR:</label><output u-text="snr"></output>
        <label>station:</label><output u-text="stationname"></output>
      </div>
      <div class="footer form-actions">
        <button u-action="frequency" value="9440">hr1</button>
        <button u-action="frequency" value="8930">hr3</button>
        <button u-action="frequency" value="10300">AB</button>
        <button u-action="frequency" value="8840">B2</button>
      </div>

    </div>

    <div class="card" u-control="scene" microID="${id}" u-is="scene">
      <div class="cHead header">
        <h3>Scenes</h3>
      </div>
      <div class="block form-actions"></div>
    </div>

    <div class="card" u-control="my" id="${id}" u-is="generic" microID="${id}">
      <div u-is="include" ref=".cHead"></div>
      <div class="block form-grid">
        <label>Pin:</label><output u-text="pin"></output>
        <label>Interval:</label><output u-text="interval"></output>
      </div>
    </div>

    <div class="card" u-control="log" u-is="log" microID="${id}">
      <div class="header">
        <svg class="icon">
          <use href="./icons.svg#${type}" />
        </svg>
        <h3 u-text="title"></h3>
        <h4 u-text="description"></h4>
        <svg class="fullscreen">
          <use href="./icons.svg#fullscreen" />
        </svg>
        <svg class="setconfig">
          <use href="./icons.svg#config" />
        </svg>
      </div>
      <div class="main"><u-linechart style="width:100%"></u-linechart></div>
    </div>

  </div>

  <script>
    if (window !== window.top) {
      // disable header and navbar in portal mode.
      document.querySelector('.u-header').style.display = 'none';
      document.querySelector('.u-navbar').style.display = 'none';
    } // if

    // Element definitions and config+state of running elements
    const uElements = {
      defs: {},
      impl: [],
      env: {},
      config: {},
      state: {}
    };

    (function() { // allows variable names to be packed by minifier
      const REFRESH_INTERVAL = 4000;
      var panelObj = document.querySelector('#panl');
      var addObj = document.getElementById('addButton');
      var sysObj = document.getElementById('sysButton');
      var params = { sys: false };
      var timer;

      async function loadPlugins() {
        var ret;
        if (!document.querySelector('dialog#addElement')) {
          // lazy load dialogs.
          ret = fetchText("./board-new.htm")
            .then(txt => {
              document.body.appendChild(document.createRange().createContextualFragment(txt));
              document.querySelectorAll('[u-is]').forEach(el => micro.attach(el));
            });
        }
        return (ret);
      } // loadPlugins()

      window.addEventListener('hashchange', function() {
        window.location.reload();
      });

      sysObj.addEventListener('click', function(evt) {
        params.sys = !toBool(params.sys);
        window.location.hash = 'sys=' + params.sys;
      });

      addObj.addEventListener('click', async function(evt) {
        // load dialogs on demand.
        await loadPlugins();
        DialogClass.openModalForm('addElement', {});
      });


      /** start updating the state of elements */
      function updateStateNow() {
        window.clearTimeout(timer);
        fetchJSON('/api/state')
          .then(json => hub.publishObj(json))
          .finally(() => timer = window.setTimeout(updateStateNow, REFRESH_INTERVAL));
      } // updateStateNow()


      // will be called after activity
      // defer update after all activities and actions are sent.
      window.updateState = function() {
        window.clearTimeout(timer);
        timer = window.setTimeout(updateStateNow, 200);
      };

      function loaded() {
        // load templates from other file.
        var p2 = fetchJSON('/elements.json').then(json => uElements.defs = json);
        var p3 = fetchJSON('/env.json').then(json => uElements.env = json);
        var p4 = fetchJSON('/config.json').then(json => uElements.config = json);
        var pState = fetchJSON('/api/state').then(json => uElements.state = json);

        params = getHashParams({ sys: false });
        var p0 = micro.loadFile('/board-templates.htm');

        // create new card
        hub.subscribe('/*/*', function(path, key, value) {
          if (path) {
            path = path.toLowerCase();
            var hElem = document.querySelector("[microID='" + path + "']");
            if (!hElem) {
              var t = path.split('/')[1];
              var p = {
                icon: t,
                id: path,
                type: t
              };

              var def = uElements.defs[t];
              if (toBool(params.sys) || (def && toBool(def.sys) == false)) {
                if ((def) && (def.icon)) {
                  p.icon = def.icon;
                }
                var e = micro.insertTemplate(panelObj, t, p);
                if (!e) {
                  t = def?.ui || 'generic';
                  e = micro.insertTemplate(panelObj, t, p);
                }
              } // if
            } // if
          } // if
        }); // create new card

        hub.subscribe('/device/*?name', function(path, key, value) {
          document.title = value;
          document.querySelector("meta[name=application-name]").content = value;
        });

        Promise.allSettled([p0, p2, p3, p4]).then(function() {
          if (uElements.env) {
            hub.write('env', JSON.stringify(uElements.env));
            hub.publishObj(uElements.env);
          }

          const c = uElements.config;
          if (c) {
            // create missing titles from type/id
            for (var t in c) for (var i in c[t]) {
              if (!c[t][i].title) c[t][i].title = t + '/' + i;
            }
            hub.write('config', JSON.stringify(c));
            hub.publishObj(c);
          }

          hub.publishObj(uElements.state);
          timer = window.setTimeout(updateStateNow, REFRESH_INTERVAL);

          // defer metadata and dialogs
          fetchJSON('/api/elements')
            .then(json => uElements.impl = json);
          loadPlugins();
        });
      } // loaded()

      window.addEventListener('DOMContentLoaded', loaded);
    })();
  </script>
</body>

</html>