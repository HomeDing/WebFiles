<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no" />
  <title>IoT-IDE</title>

  <link rel="icon" type="image/png" href="/favicon48.png" sizes="48x48" />
  <!-- no web site meta data here -->
  <link Content-Type="text/css" href="iotstyle.css" rel="stylesheet" />
  <script src="micro.js"></script>
  <link Content-Type="text/css" href="/u-toast.css" rel="stylesheet" />
  <script src="u-toast.js"></script>
  <style>
    #files {
      border: solid 1px black;
      background-color: white;
      color: black;
      font-size: 1rem;
      overflow-y: scroll;
      width: 100%;
      height: 100%;
    }

    #files>div {
      display: flex;
    }

    #files>div:hover {
      background-color: #eeeeee;
    }

    .file-entry,
    .file-delete {
      cursor: pointer;
      font-family: 'Courier New', Courier, monospace;
      padding: 0 0.1em;
      height: 1.2em;
    }

    #files>div div.file-entry {
      overflow: hidden;
      flex-grow: 1;
    }

    pre.code {
      display: block;
      margin: 0;
      border: solid 1px black;
      padding: 0.2em;
      font-family: Courier New, Courier, monospace;
      font-size: 0.75rem;
      line-height: 1.2;
      color: black;
      background-color: #fffff8;
      overflow-x: hidden;
      overflow-y: scroll;
      height: 100%;
      width: 100%;
    }

    #checker {
      min-width: 3rem;
      text-align: center;
      border: 2px solid silver;
      background-color: #eeeeee;
    }

    button.once {
      position: relative;
    }

    button:disabled.once:after {
      content: '';
      position: absolute;
      height: 0.6em;
      width: 0.6em;
      left: 50%;
      top: 50%;
      border: 0.2em solid #203050;
      border-bottom-color: transparent;
      border-radius: 50%;
      animation: 1.5s linear infinite turn;
    }

    @keyframes turn {
      0% {
        transform: translate(-50%, -50%) rotate(0turn);
      }

      100% {
        transform: translate(-50%, -50%) rotate(1turn);
      }
    }

    .grid-container {
      display: grid;
      height: 100vh;

      grid-template-columns: minmax(32ch, max-content) minmax(32ch, auto);
      grid-template-rows: min-content min-content min-content 1fr;
      column-gap: 0.5rem;
    }

    .grid-container>div {
      grid-column: 1/-1;
    }
  </style>
</head>

<body style="margin: 0; padding: 0">
  <div class="grid-container" style="padding: 1rem">
    <div class="u-header">
      <svg class="icon">
        <use href="./icons.svg#ide" />
      </svg>
      <h1>HomeDing IDE</h1>

      <span style="flex-grow: 1"></span>
    </div>

    <div class="u-navbar">
      <a href="/">Home</a>
      <a href="/board.htm">Board</a>
      <a href="/microide.htm">IDE</a>
      <a href="/log.htm">Log</a>
      <span class="gap"></span>
      <button class="once" id="doReboot">reboot</button>
    </div>

    <div style="grid-column: 1">
      <h3 style="display: inline-block; margin: 0">Files</h3>
      <button style="float: right" onclick="handleReloadFS()">reload</button>
    </div>

    <div style="grid-column: 2">
      <h3 style="display: inline-block; margin: 0">
        File: <span id="activeFile"></span>
      </h3>
      <button id="format" class="once secondary" style="float: right">
        format
      </button>
      <span class="btn-group" style="float: right">
        <button class="once" onclick="handleSave()">save</button>
        <label class="valid" id="checker">ok</label>
      </span>
    </div>

    <!-- <div class="row" style="margin-bottom:0;overflow:hidden"> -->
    <div id="files" style="grid-column: 1; flex: 1 1 auto; overflow: scroll" title="drag and drop files here."></div>

    <pre style="grid-column: 2" class="code" contenteditable id="content" autocomplete="off" autocorrect="off"
      autocapitalize="off" spellcheck="false"></pre>
  </div>
  <u-toast></u-toast>

  <script>
    const filesObj = document.getElementById('files');
    const contentObj = document.getElementById('content');
    const toastObj = document.querySelector('u-toast');

    const activeFileObj = document.getElementById('activeFile');
    const checkerObj = document.getElementById('checker');

    let thisFile;

    // load file into editor from the server
    function loadEntry(e) {
      let path = getPath();
      const s = e.target.innerText;

      const name = s.split(' ')[0].substring(1);
      contentObj.innerText = '';

      if (!s.endsWith(')')) {
        // a folder
        if (s === '..') {
          // one level up.
          path = path.split('/');
          path.splice(path.length - 2, 1);
          path = path.join('/');
        } else {
          path = s + '/';
        }
        activeFileObj.innerText = thisFile = path;
        location.hash = path;

      } else {
        // load file
        fetchText(name)
          .then(function(txt) {
            contentObj.innerText = txt;
            activeFileObj.innerText = thisFile = name;
          });
      }
    } // handleLoadFile()

    // General Purpose Promise
    function DelayPromise(ms) {
      return new Promise(function(resolve) {
        setTimeout(resolve, ms);
      });
    }

    // delete file on the server
    async function handleDeleteFile(e) {
      e.stopPropagation();
      e.preventDefault();
      let s = e.target.parentElement.firstElementChild.innerText;
      s = s.split(' ')[0];
      const yn = window.confirm('Delete ' + s + ' ?');
      if (yn) {
        await fetch(s, { method: 'DELETE' });
        window.setTimeout(handleReloadFS, 100);
      } // if
    } // handleDeleteFile()

    // add one file to the directory listing.
    function addEntry(f) {
      const row = createHTMLElement(filesObj, 'div', {
        class: 'row nogutter',
      });
      row.addEventListener('click', loadEntry);

      // add file name and size
      const entry = createHTMLElement(row, 'div', {
        class: 'col stretch file-entry',
      });
      if (f.type === 'dir') {
        entry.innerText = f.name;
      } else {
        entry.innerText = f.name + ' (' + f.size + ')';
        const de = createHTMLElement(row, 'div', {
          class: 'col file-delete',
        });
        de.innerText = '[X]';
        de.addEventListener('click', handleDeleteFile);
      }
    } // addFileEntry()

    // get the path to the current folder to be shown
    function getPath() {
      let path = '/';
      if (location.hash.length > 0) path = location.hash.substring(1);
      if (!path.endsWith('/')) path += '/';
      return path;
    }

    function handleReloadFS() {
      const path = getPath();
      fetchJSON(`/api/list?path=${path}`)
        .then(function(x) {
          x.sort(function(a, b) {
            if (a.type && !b.type) return -1;
            if (!a.type && b.type) return 1;
            const an = a.name.toLowerCase();
            const bn = b.name.toLowerCase();
            if (an < bn) return -1;
            if (an > bn) return 1;
            return 0;
          });

          filesObj.innerHTML = '';
          if (path !== '/') addEntry({ name: '..', type: 'dir' });

          x.forEach(function(f) {
            addEntry(f);
          });
        });
    } // handleReloadFS()

    // some drag events need to call stopPropagation and preventDefault to allow custom interactions
    function dragHelper(e) {
      e.stopPropagation();
      e.preventDefault();
    } // dragHelper()

    // only paste plain text at cursor position.
    contentObj.addEventListener('paste', function(e) {
      const sel = window.getSelection();
      if (sel.rangeCount) {
        const txt = e.clipboardData.getData('text/plain');
        sel.deleteFromDocument();
        sel.getRangeAt(0).insertNode(document.createTextNode(txt));
        sel.collapseToEnd();
        e.preventDefault();
      }
    });

    // start uploading file content
    function startUpload(filename, contentType, content) {
      toastObj.info(`Uploading ${filename}`);
      const formData = new FormData();
      const blob = new Blob([content], {
        type: contentType,
      });
      formData.append(filename, blob, filename);

      fetch('/', { method: 'POST', body: formData }).then(() => {
        handleReloadFS();
        toastObj.info('done.');
      });
    }

    // save file from editor back to server.
    function handleSave() {
      thisFile = window.prompt('Save File:', thisFile);
      if (thisFile !== undefined)
        startUpload(thisFile, 'text/html', contentObj.innerText);
    } // handleSave()


    // Format JSON file, remove ugly characters...
    document.querySelector("#format").addEventListener('click', e => {
      const fName = activeFileObj.innerText;
      if (fName.toLowerCase().endsWith('.json')) {
        let t = contentObj.innerText;
        let o = null;

        // missing comma in '},{'
        t = t.replace(/\}\s*\{/g, '},{');
        // missing comma in '},"nextkey"'
        t = t.replace(/\}\s*"/g, '},"');
        // missing comma in '"value","nextkey"' when there is \n
        t = t.replace(/"\s*\n\s*"/g, '","');
        // comma before close brackets
        t = t.replace(/,\s*([}\]])/g, '$1');

        try {
          o = JSON.parse(t);
          if (o && typeof o === 'object') {
            t = JSON.stringify(o, null, 2);
            t = t.replace(/\[\s+"([^,[\]]*)"\s+\]/g, '[ "$1" ]');
            t = t.replace(/\{\s+"([^,{}}]*)"\s+\}/g, '{ "$1" }');
            contentObj.innerText = t;
          }
        } finally {
          // do not report an error
        }
      }
    });

    // files was dropped on dropzone
    function drop(e) {
      e.stopPropagation();
      e.preventDefault();

      const dtFiles = e.dataTransfer.files;
      toastObj.info(`Uploading ${dtFiles.length} files...`);

      const formData = new FormData();
      const path = getPath();
      for (let i = 0; i < dtFiles.length; i++) {
        formData.append('file', dtFiles[i], path + dtFiles[i].name);
      }
      fetch('/', { method: 'POST', body: formData }).then(function() {
        handleReloadFS();
        toastObj.info('done.');
      });
    }

    filesObj.addEventListener('dragenter', dragHelper, false);
    filesObj.addEventListener('dragover', dragHelper, false);
    filesObj.addEventListener('drop', drop, false);

    window.addEventListener('DOMContentLoaded', handleReloadFS);
    window.addEventListener('hashchange', handleReloadFS);

    function jsonCheck() {
      const fName = activeFileObj.innerText;
      if (!fName.toLowerCase().endsWith('.json')) {
        if (checkerObj.textContent != '--') {
          checkerObj.textContent = '--';
          checkerObj.className = '';
        }
      } else {
        let o = null;
        let t = contentObj.innerText;
        if (t.indexOf('\xA0') >= 0)
          contentObj.innerText = t = t.replace(/\u00A0/g, ' ');

        try {
          o = JSON.parse(t);
          if (o && typeof o === 'object') {
            // ok
          } else {
            o = null;
          } // if
        } catch (e) {
          checkerObj.title = e.message;
        }

        if (o !== null) {
          checkerObj.textContent = 'ok';
          checkerObj.className = 'valid';
          checkerObj.title = '';
        } else {
          checkerObj.textContent = 'no';
          checkerObj.className = 'invalid';
        }
        window.status = t.length + '--' + (o !== null);
      } // if
    } // jsonCheck()

    window.setInterval(jsonCheck, 500);
    // call this to start blocking the button while activity is running.
    function runOnce() {
      // eslint-disable-next-line @typescript-eslint/no-this-alias
      var scope = this;
      this.disabled = true;
      DelayPromise(20) // give some time to display progress stuff
        .then(function() {
          return fetch('/api/reboot');
        })
        .then(function() {
          return DelayPromise(20);
        })
        .finally(function(result) {
          scope.disabled = false;
        });
    } // runOnce

    var resetObj = document.getElementById('doReboot');
    resetObj.addEventListener('click', runOnce);
  </script>
</body>

</html>