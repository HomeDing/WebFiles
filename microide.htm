<!doctype html>
<html lang="en">

<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no" />
  <title>IoT-IDE</title>

  <link rel="icon" type="image/png" href="/favicon48.png" sizes="48x48">
  <!-- no web site meta data here -->
  <link Content-Type="text/css" href="iotstyle.css" rel="stylesheet" />
  <script src="micro.js"></script>
  <style>
    #files {
      border: solid 1px black;
      background-color: white;
      color: black;
      font-size: 1rem;
      overflow-y: scroll;
      width: 100%;
      height: 100%;
    }

    #files>div {
      display: flex;
    }


    #files>div:hover {
      background-color: #eeeeee;
    }

    .file-entry,
    .file-delete {
      cursor: pointer;
      font-family: 'Courier New', Courier, monospace;
      padding: 0 0.1em;
      height: 1.2em;
    }


    #files>div div.file-entry {
      overflow: hidden;
      flex-grow: 1;
    }

    pre.code {
      display: block;
      margin: 0;
      border: solid 1px black;
      padding: 0.2em;
      font-family: Courier New, Courier, monospace;
      font-size: 0.75rem;
      line-height: 1.2;
      color: black;
      background-color: #fffff8;
      overflow-x: hidden;
      overflow-y: scroll;
      height: 100%;
      width: 100%;
    }

    #dropzone {
      color: black;
      background-color: #dddd88;
      padding: 0.6rem;
      border: 1px dashed black;
    }

    #progress {
      position: absolute;
      top: 0.6rem;
      right: 0.1rem;
      width: 300px;
      height: 1.4rem;
      border: 0.1rem solid black;
      opacity: 1;
      pointer-events: none;
      background-color: white;
    }

    #progress.fadeout {
      transition-delay: 2s;
      transition-property: opacity;
      transition-duration: 1s;
      transition-timing-function: linear;
      opacity: 0;
    }

    #checker {
      min-width: 3rem;
      text-align: center;
      border: 2px solid silver;
      background-color: #eeeeee;
    }

    button.once {
      position: relative;
    }

    button:disabled.once:after {
      content: "";
      position: absolute;
      height: 0.6em;
      width: 0.6em;
      left: 50%;
      top: 50%;
      border: 0.2em solid #203050;
      border-bottom-color: transparent;
      border-radius: 50%;
      animation: 1.5s linear infinite turn;
    }

    @keyframes turn {
      0% {
        transform: translate(-50%, -50%) rotate(0turn);
      }

      100% {
        transform: translate(-50%, -50%) rotate(1turn);
      }
    }

    .grid-container {
      display: grid;
      height: 100vh;

      grid-template-columns: minmax(32ch, max-content) minmax(32ch, auto);
      grid-template-rows: min-content min-content min-content 1fr;
      column-gap: 0.5rem;
    }

    .grid-container>div {
      grid-column: 1/-1;
    }
  </style>
</head>

<body style="margin:0;padding:0">
  <div class="grid-container" style="padding:1rem">

    <progress id="progress" class="fadeout" max="1" value="0"></progress>

    <div class="u-header">
      <svg class="icon">
        <use href="./icons.svg#ide" />
      </svg>
      <h1>HomeDing IDE</h1>

      <span style="flex-grow: 1"></span>
      <div id="dropzone">Drop here.</div>
    </div>

    <div class="u-navbar">
      <a href="/">Home</a>
      <a href="/board.htm">Board</a>
      <a href="/microide.htm">IDE</a>
      <a href="/log.htm">Log</a>
      <span class="gap"></span>
      <button class="once" id="doReboot">reboot</button>
    </div>

    <div style="grid-column: 1;">
      <h3 style="display: inline-block; margin:0">Files</h3>
      <button style="float: right" onclick="handleReloadFS()">reload</button>
    </div>

    <div style="grid-column: 2;">
      <h3 style="display: inline-block;margin:0">File: <span id="activeFile"></span></h3>
      <button class="once secondary" style="float: right" onclick="handleFmt()">format</button>
      <span class="btn-group" style="float: right">
        <button class="once" onclick="handleSave()">save</button>
        <label class="valid" id="checker">ok</label>
      </span>
    </div>

    <!-- <div class="row" style="margin-bottom:0;overflow:hidden"> -->
    <div id="files" style="grid-column: 1;flex:1 1 auto;overflow:scroll">...</div>

    <pre style="grid-column: 2;" class="code" contenteditable id="content" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"></pre>
  </div>

  <script>
    const filesObj = document.getElementById('files');
    const contentObj = document.getElementById('content');
    const progressObj = document.getElementById('progress');

    const activeFileObj = document.getElementById('activeFile');
    const checkerObj = document.getElementById('checker');

    let activeFileName;

    // load file into editor from the server
    function handleLoadFile(e) {
      const s = e.target.innerText;
      activeFileName = s.split(' ')[0];
      activeFileObj.innerText = activeFileName;

      fetch(activeFileName)
        .then(function (result) {
          return (result.text());
        }).then(function (txt) {
          contentObj.innerText = txt;
        });
    } // handleLoadFile()

    // General Purpose Promise
    function DelayPromise(ms) {
      return new Promise(function (resolve) {
        setTimeout(resolve, ms);
      });
    }

    // delete file on the server
    function handleDeleteFile(e) {
      e.stopPropagation();
      e.preventDefault();
      let s = e.target.parentElement.firstElementChild.innerText;
      s = s.split(' ')[0];
      const yn = window.confirm('Delete ' + s + ' ?');
      if (yn) {
        fetch(s, { method: 'DELETE' });
        window.setTimeout(handleReloadFS, 100);
      } // if
    } // handleDeleteFile()


    // add one file to the directory listing.
    function addFileEntry(container, f) {
      const row = createHTMLElement(container, 'div', { class: 'row nogutter' });
      row.addEventListener('click', handleLoadFile);

      // add file name and size
      const entry = createHTMLElement(row, 'div', { class: 'col stretch file-entry' });
      entry.innerText = entry.title = f.name + ' (' + f.size + ')';

      const delx = createHTMLElement(row, 'div', { class: 'col file-delete' });
      delx.innerText = '[X]';
      delx.addEventListener('click', handleDeleteFile);
    } // addFileEntry()

    // create the directory listing from the fileList dataset.
    function listFiles(fileList) {
      // remove all exiting entries
      filesObj.innerHTML = '';

      fileList.forEach(function (f) {
        addFileEntry(filesObj, f);
      })
    } // listFiles()


    function handleReloadFS() {
      fetch('/$list')
        .then(function (result) {
          return (result.json());
        }).then(function (x) {
          x.sort(function (a, b) {
            const an = a.name.toLowerCase();
            const bn = b.name.toLowerCase();
            if (an < bn) {
              return -1;
            }
            if (an > bn) {
              return 1;
            }
            return 0;
          });
          listFiles(x);
        });
    } // handleReloadFS()


    // some drag events need to call stopPropagation and preventDefault to allow custom interactions
    function dragHelper(e) {
      e.stopPropagation();
      e.preventDefault();
    } // dragHelper()

    // only paste plain text at cursor position.
    contentObj.addEventListener('paste', function (e) {
      const sel = window.getSelection();
      if (sel.rangeCount) {
        const txt = e.clipboardData.getData('text/plain');
        sel.deleteFromDocument();
        sel.getRangeAt(0).insertNode(document.createTextNode(txt));
        sel.collapseToEnd();
        e.preventDefault();
      }
    })

    // start uploading file content
    function startUpload(filename, contentType, content) {
      progressObj.classList.remove('fadeout');

      const formData = new FormData();
      const blob = new Blob([content], {
        type: contentType
      });
      formData.append(filename, blob, filename);

      const objHTTP = new XMLHttpRequest();
      objHTTP.open('POST', '/');

      if (objHTTP.upload) {
        objHTTP.upload.addEventListener('progress', function (e) {
          progressObj.max = e.total;
          progressObj.value = e.loaded;
        });
      } // if

      objHTTP.addEventListener('readystatechange', function (p) {
        if ((objHTTP.readyState === 4) && (objHTTP.status >= 200) && (objHTTP.status < 300)) {
          window.setTimeout(handleReloadFS, 200);
          progressObj.classList.add('fadeout');
        } // if
      });
      objHTTP.send(formData);
    }


    // save file from editor back to server.
    function handleSave() {
      progressObj.value = 0;
      progressObj.max = 1;
      activeFileName = window.prompt('Upload File:', activeFileName);
      if (activeFileName !== undefined)
        startUpload(activeFileName, 'text/html', contentObj.innerText);
    } // handleSave()


    // Format JSON file, remove ugly characters...
    function handleFmt() {
      const fName = activeFileObj.innerText;
      if (fName.toLowerCase().endsWith('.json')) {
        let t = contentObj.innerText;
        let o = null;

        // missing comma in '}{'
        t = t.replace(/\}\s*\{/g, '},{');
        // comma before close brackets
        t = t.replace(/,\s*([}\]])/g, '$1');

        try {
          o = JSON.parse(t);
          if (o && typeof o === 'object') {
            contentObj.innerText = JSON.stringify(o, null, 2);
          }
        } finally {
          // do not report an error
        }
      }
    } // handleFmt()


    // files was dropped on dropzone
    function drop(e) {
      progressObj.classList.remove('fadeout');
      progressObj.value = 0;
      progressObj.max = 1;
      e.stopPropagation();
      e.preventDefault();

      const dtFiles = e.dataTransfer.files;

      const formData = new FormData();
      const root = '/' + (location.hash ? location.hash.substring(1) + '/' : '')
      for (let i = 0; i < dtFiles.length; i++) {
        formData.append('file', dtFiles[i], root + dtFiles[i].name);
      }

      const xmlHttp = new XMLHttpRequest();

      xmlHttp.upload.addEventListener('progress', function (e) {
        progressObj.max = e.total;
        progressObj.value = e.loaded;
      });

      xmlHttp.addEventListener('readystatechange', function (p) {
        if ((xmlHttp.readyState === 4) && (xmlHttp.status >= 200) && (xmlHttp.status < 300)) {
          window.setTimeout(handleReloadFS, 100);
          progressObj.classList.add('fadeout');
          // fade progress
        } // if
      });
      xmlHttp.open('POST', '/');
      xmlHttp.send(formData);
    }

    const box = document.getElementById('dropzone');
    box.addEventListener('dragenter', dragHelper, false);
    box.addEventListener('dragover', dragHelper, false);
    box.addEventListener('drop', drop, false);

    window.addEventListener('DOMContentLoaded', handleReloadFS);

    function jsonCheck() {
      const fName = activeFileObj.innerText;
      if (!fName.toLowerCase().endsWith('.json')) {
        if (checkerObj.textContent != '--') {
          checkerObj.textContent = '--';
          checkerObj.className = '';
        }

      } else {
        let o = null;
        let t = contentObj.innerText;
        if (t.indexOf('\xA0') >= 0)
          contentObj.innerText = t = t.replace(/\u00A0/g, ' ');

        try {
          o = JSON.parse(t);
          if (o && typeof o === 'object') {
            // ok
          } else {
            o = null;
          } // if
        } catch (e) {
          checkerObj.title = e.message;
        }

        if (o !== null) {
          checkerObj.textContent = 'ok';
          checkerObj.className = 'valid';
          checkerObj.title = '';
        } else {
          checkerObj.textContent = 'no';
          checkerObj.className = 'invalid';
        }
        window.status = t.length + '--' + (o !== null);
      } // if

    } // jsonCheck()

    window.setInterval(jsonCheck, 500);
    // call this to start blocking the button while activity is running.
    function runOnce() {
      var scope = this;
      this.disabled = true;
      DelayPromise(90)  // give some time to display progress stuff
        .then(function () {
          return fetch('/$reboot');
        }).then(function () {
          return DelayPromise(90)
        }).finally(function (result) {
          scope.disabled = false;
        });
    } // runOnce

    var resetObj = document.getElementById('doReboot');
    resetObj.addEventListener('click', runOnce);
  </script>
</body>

</html>