<!doctype html>
<html lang="en">

<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Board</title>
  <link rel="icon" type="image/png" href="/favicon48.png" sizes="48x48">
  <meta name="application-name" content="Ding" />
  <meta name="msapplication-config" content="/browserconfig.xml" />
  <meta name="msapplication-TileColor" content="#2b5797" />
  <meta name="msapplication-TileImage" content="/favicon144.png" />
  <link rel="apple-touch-icon" sizes="180x180" href="/favicon180.png" />
  <meta name="mobile-web-app-capable" content="yes" />
  <link rel="manifest" href="/site.webmanifest" />
  <meta name="theme-color" content="#ffffff" />

  <link Content-Type="text/css" href="/iotstyle.css" rel="stylesheet" defer />
  <script src="/micro.js" defer></script>
</head>

<body class="sitelayout" style="width:100%;--layout-gap: 0;--main-back:transparent">
  <main>
    <div id="panl" class="card-container col365" style="--card-height: auto;">
    </div>
  </main>

  <div id="u-templates" style="display:none">
    <div class="cHead header">
      <h3 u-text="title"></h3>
      <h4 u-text="description"></h4>
    </div>

    <div style="grid-column: 1/-1" u-control="device" u-is="generic" microID="${id}">
      <h1 style="margin:0"></h1>
      <h4><span u-text="description"></span> (<span u-text="room"></span>)</h4>
    </div>

    <div class="card" u-control="generic" u-is="generic" microID="${id}">
      <div u-is="include" ref=".cHead"></div>
      <div class="main">
        <div class="form-grid"><label>Value:</label><span u-text="value"></span></div>
      </div>
    </div>

    <div class="card" u-control="switch" id="${id}" u-is="generic" microID="${id}">
      <div u-is="include" ref=".cHead"></div>
      <div class="main">
        <span class="u-bool ux-value border" u-active="value"></span>
        <div u-is="input">
          <span class="down">off</span>
          <input class="switch" u-value="value" type="range">
          <span class="up">on</span>
        </div>
      </div>
    </div>

    <form method="dialog" class="card" u-control="schedule" microID="${id}" u-is="generic">
      <div u-is="include" ref=".cHead"></div>
      <span class="u-bool ux-value" u-active="value"></span>
      <fieldset class="block btn-group">
        <legend>Mode</legend>
        <label><input name="mode" u-value="mode" type="radio" value="off">Off</label>
        <label><input name="mode" u-value="mode" type="radio" value="on">On</label>
        <label><input name="mode" u-value="mode" type="radio" value="timer">Timer</label>
      </fieldset>
      <div class="block form-grid">
        <label>Start:</label><output u-text="ontime"></output>
        <label>End:</label><output u-text="offtime"></output>
      </div>
    </form>

    <form method="dialog" class="card" u-control="timer" microID="${id}" u-is="timer">
      <div u-is="include" ref=".cHead"></div>
      <span class="u-bool ux-value" u-active="value"></span>
      <fieldset class="block btn-group">
        <legend>Mode</legend>
        <label><input name="mode" u-value="mode" type="radio" value="off">Off</label>
        <label><input name="mode" u-value="mode" type="radio" value="on">On</label>
        <label><input name="mode" u-value="mode" type="radio" value="timer">Timer</label>
      </fieldset>
      <div class="main">
        <div class="u-bar">
          <span class="pulse"></span>
          <span class="current"></span>
        </div>
      </div>
      <div class="main">
        <button u-action="start" value="1">Start</button>
        <button u-action="next" value="1">Next</button>
      </div>
    </form>

    <div class="card" u-control="value" u-is="generic" microID="${id}">
      <div u-is="include" ref=".cHead"></div>
      <div class="block form-grid">
        <label>value:</label>
        <span u-is="input">
          <input type="range" u-value="value">
          <span u-text="value"></span>
        </span>
      </div>
    </div>

    <div class="card" u-control="dht" microID="${id}" u-is="generic">
      <div u-is="include" ref=".cHead"></div>
      <div class="main" style="display: grid; grid-template-columns: auto auto; grid-column-gap: 5px;">
        <span style="font-size:2em"><span u-text="temperature">__.__</span>&deg;C</span>
        <span style="font-size:2em"><span u-text="humidity">__.__</span>%</span>
        <span>Temperature</span><span>Humidity</span>
      </div>
    </div>

    <div class="card" u-control="and" id="${id}" u-is="generic" microID="${id}">
      <div u-is="include" ref=".cHead"></div>
      <div class="main">
        <span class="u-bool ux-value" u-active="value"></span>
        <div class="form-grid"><label>value:</label><output u-text="value"></output></div>
      </div>
    </div>

    <div class="card" u-control="bl0937" id="${id}" u-is="bl0937" microID="${id}">
      <div u-is="include" ref=".cHead"></div>
      <div class="main">
        <table style="width:100%;font-size:2rem">
          <tr>
            <td>
              <span u-text="power"></span> W
            </td>
            <td style="display:none">
              <span u-text="current"></span> mA
            </td>
            <td style="display:none">
              <span u-text="voltage"></span> V
            </td>
            <td>
              <span u-text="energy"></span> Wh
            </td>
          </tr>
        </table>
        mode: <button u-action="mode" value="current">current</button>
        <button u-action="mode" value="voltage">voltage</button>
      </div>
    </div>

    <div class="card" u-control="color" id="${id}" u-is="color" microID="${id}">
      <div u-is="include" ref=".cHead"></div>
      <div class="block form-grid">
        <label>value:</label><output name="value"></output>
        <label>color:</label><input type="color" name="color">
        <label style="display:none">white:</label>
        <div style="display:none"><input type="range" max="255" name="white"><output name="white"></output></div>
        <label>brightness:</label>
        <div><input type="range" max="100" name="brightness"><output u-text="brightness"></output></div>
      </div>
      <div class="footer form-actions">
        <button u-action="mode" value="fade">fade</button><button u-action="mode" value="fix">fix</button><button
          u-action="mode" value="pulse">pulse</button><button u-action="mode" value="wheel">wheel</button>
      </div>
    </div>

    <div class="card small" u-control="webbutton" microID="${id}" u-is="button">
      <div class="main"><button u-text="description">.</button></div>
    </div>

    <div class="card" u-control="scene" microID="${id}" u-is="scene">
      <div class="header">
        <h3>Scenes</h3>
      </div>
      <div class="block form-actions"></div>
    </div>
  </div>


  <a style="position:absolute;top:1em;right:1em" href="/microide.htm">IDE</a>

  <script>
    (function() { // allows variable names to be packed by minifier
      const REFRESH_INTERVAL = 4000;
      var panelObj = document.querySelector('#panl');
      var timer;
      var _title = undefined;
      var _name = undefined;

      // Element type reuse
      var alias = {
        "sht20": "dht",
        "neo": "color"
      };

      // Element definitions and config+state of running elements
      const uElements = {
        // defs: {},
        // impl: [],
        env: {},
        config: {},
        state: {}
      }

      function updateState() {
        fetchJSON('/api/state')
          .then(json => hub.publishObj(json))
          .finally(() => timer = window.setTimeout(updateState, REFRESH_INTERVAL));
      } // updateState()
      window.updateState = updateState;

      function loaded() {
        // fetch element definitions from env.json and config.json asap
        var p3 = fetchJSON('/env.json').then(json => uElements.env = json);
        var p4 = fetchJSON('/config.json').then(json => uElements.config = json);
        var pState = fetchJSON('/api/state').then(json => uElements.state = json);

        // create new card
        hub.subscribe('/*/*', function(path) {
          // console.log("ev:", path);
          if (path) {
            path = path.toLowerCase();
            var hElem = document.querySelector("[microID='" + path + "']");
            if (!hElem) {
              var t = path.split('/')[1];
              var p = {
                icon: t,
                id: path,
                type: t
              };

              var e = micro.insertTemplate(panelObj, t, p);
              if (!e) {
                t = alias[t]; // || 'generic';
                e = micro.insertTemplate(panelObj, t, p);
              }
            } // if
          } // if
        }); // create new card

        function setTitle() {
          if (!_title) _title = '(' + _name + ')';
          document.title = _title;
          document.querySelector("meta[name=application-name]").content = _title;
          document.querySelector("h1").textContent = _title;
        }

        hub.subscribe('/device/*?name', function(path, key, value) {
          _name = value;
          setTitle();
        });

        hub.subscribe('/device/*?title', function(path, key, value) {
          _title = value;
          setTitle();
        });

        Promise.allSettled([p3, p4, pState]).then(() => {
          if (uElements.env) {
            // hub.write('env', JSON.stringify(uElements.env));
            hub.publishObj(uElements.env);
          }

          // create missing titles from type/id
          const c = uElements.config;
          if (c) {
            for (var t in c) for (var i in c[t]) {
              if (!c[t][i].title) c[t][i].title = t + '/' + i;
            }
            hub.publishObj(c);
          }

          hub.publishObj(uElements.state);
          timer = window.setTimeout(updateState, REFRESH_INTERVAL);
        });
      } // loaded()

      window.addEventListener('load', loaded);
    })();
  </script>
</body>

</html>