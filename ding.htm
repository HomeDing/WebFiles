<!doctype html>
<html lang="en">

<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Board</title>
  <link rel="icon" type="image/png" href="/favicon48.png" sizes="48x48">
  <meta name="application-name" content="Ding" />
  <meta name="msapplication-config" content="/browserconfig.xml" />
  <meta name="msapplication-TileColor" content="#2b5797" />
  <meta name="msapplication-TileImage" content="/favicon144.png" />
  <link rel="apple-touch-icon" sizes="180x180" href="/favicon180.png" />
  <meta name="mobile-web-app-capable" content="yes" />
  <link rel="manifest" href="/site.webmanifest" />
  <meta name="theme-color" content="#ffffff" />
  <link rel="icon" type="image/png" href="/favicon48.png" sizes="48x48">
  <link Content-Type="text/css" href="/iotstyle.css" rel="stylesheet" />
  <script src="/micro.js"></script>

  <style>
    img,
    .panel {
      -ms-user-select: none;
      user-select: none;
    }
  </style>
</head>

<body>
  <main class="panel"></main>

  <div id="u-templates" style="display:none">
    <div class="cHead block header">
      <h3 u-text="title"></h3>
      <h4 u-text="description"></h4>
    </div>

    <div style="grid-column: 1/-1" u-control="device" u-is="generic" microID="${id}">
      <div class="row u-header">
        <h1><span u-text="name"> </span></h1>
      </div>
      <h4><span u-text="description"></span> (<span u-text="room"></span>)</h4>
    </div>

    <div class="card" u-control="generic" u-is="generic" microID="${id}">
      <div u-is="include" ref=".cHead"></div>
      <div class="block">
        <div class="form-grid"><label>Value:</label><span u-text="value"></span></div>
      </div>
    </div>

    <div class="card" u-control="switch" id="${id}" u-is="generic" microID="${id}">
      <div u-is="include" ref=".cHead"></div>
      <div class="block">
        <span class="u-bool ux-value border" u-active="value"></span>
        <div u-is="input">
          <span class="down">off</span>
          <input class="switch" u-value="value" type="range">
          <span class="up">on</span>
        </div>
      </div>
    </div>

    <form method="dialog" class="card" u-control="schedule" microID="${id}" u-is="generic">
      <div u-is="include" ref=".cHead"></div>
      <span class="u-bool ux-value" u-active="value"></span>
      <div class="block form-grid">
        <label>Mode:</label>
        <div class="btn-group">
          <label><input name="mode" u-value="mode" type="radio" value="off">Off</label>
          <label><input name="mode" u-value="mode" type="radio" value="on">On</label>
          <label><input name="mode" u-value="mode" type="radio" value="timer">Timer</label>
        </div>
        <label>Start:</label><output u-text="ontime"></output>
        <label>End:</label><output u-text="offtime"></output>
      </div>
    </form>

    <form method="dialog" class="card" u-control="timer" microID="${id}" u-is="timer">
      <div u-is="include" ref=".cHead"></div>
      <span class="u-bool ux-value" u-active="value"></span>
      <div class="block form-grid">
        <label>Mode:</label>
        <div class="btn-group">
          <label><input name="mode" u-value="mode" type="radio" value="off">Off</label>
          <label><input name="mode" u-value="mode" type="radio" value="on">On</label>
          <label><input name="mode" u-value="mode" type="radio" value="timer">Timer</label>
        </div>
      </div>
      <div class="block">
        <div class="u-bar">
          <span class="pulse"></span>
          <span class="current"></span>
        </div>
      </div>
      <div class="block">
        <button u-action="start" value="1">Start</button>
        <button u-action="next" value="1">Next</button>
      </div>
    </form>

    <div class="card" u-control="value" u-is="generic" microID="${id}">
      <div u-is="include" ref=".cHead"></div>
      <div class="block form-grid">
        <label>value:</label>
        <span u-is="input">
          <input type="range" u-value="value">
          <span u-text="value"></span>
        </span>
      </div>
    </div>

    <div class="card" u-control="dht" microID="${id}" u-is="generic">
      <div u-is="include" ref=".cHead"></div>
      <div class="block" style="display: grid; grid-template-columns: auto auto; grid-column-gap: 5px;">
        <span style="font-size:2em"><span u-text="temperature">__.__</span>&deg;C</span>
        <span style="font-size:2em"><span u-text="humidity">__.__</span>%</span>
        <span>Temperature</span><span>Humidity</span>
      </div>
    </div>

    <div class="card" u-control="and" id="${id}" u-is="generic" microID="${id}">
      <div u-is="include" ref=".cHead"></div>
      <div class="block">
        <span class="u-bool ux-value" u-active="value"></span>
        <div class="form-grid"><label>value:</label><output u-text="value"></output></div>
      </div>
    </div>

    <div class="card" u-control="bl0937" id="${id}" u-is="bl0937" microID="${id}">
      <div u-is="include" ref=".cHead"></div>
      <div class="block">
        <table style="width:100%;font-size:2rem">
          <tr>
            <td>
              <span u-text="power"></span> W
            </td>
            <td style="display:none">
              <span u-text="current"></span> mA
            </td>
            <td style="display:none">
              <span u-text="voltage"></span> V
            </td>
          </tr>
        </table>
        mode: <button u-action="mode" value="current">current</button>
        <button u-action="mode" value="voltage">voltage</button>
      </div>
    </div>

    <div class="card" u-control="color" id="${id}" u-is="color" microID="${id}">
      <div u-is="include" ref=".cHead"></div>
      <div class="block form-grid">
        <label>value:</label><output name="value"></output>
        <label>color:</label><input type="color" name="color">
        <label style="display:none">white:</label>
        <div style="display:none"><input type="range" max="255" name="white"><output name="white"></output></div>
        <label>brightness:</label>
        <div><input type="range" max="100" name="brightness"><output u-text="brightness"></output></div>
      </div>
      <div class="block footer form-actions">
        <button u-action="mode" value="fade">fade</button><button u-action="mode" value="fix">fix</button><button u-action="mode" value="pulse">pulse</button><button u-action="mode" value="wheel">wheel</button>
      </div>
    </div>

    <div class="card small" u-control="webbutton" microID="${id}" u-is="button">
      <div class="block"><button u-text="description">.</button></div>
    </div>

    <div class="card" u-control="scene" microID="${id}" u-is="scene">
      <div class="block header">
        <h3>Scenes</h3>
      </div>
      <div class="block form-actions"></div>
    </div>
  </div>


  <hr />
  <a href="/microide.htm">IDE</a>

  <script>
    var panelObj = document.querySelector('.panel');
    var timer;

    // Element type reuse
    var alias = {
      "sht20": "dht",
      "neo": "color"
    };

    hub.subscribe('/*/*', function (path, key, value) {
      if (path) {
        path = path.toLowerCase();
        var hElem = document.querySelector("[microID='" + path + "']");
        if (!hElem) {
          var t = path.split('/')[1];
          var p = {
            id: path,
            type: t
          };

          var e = micro.insertTemplate(panelObj, t, p);
          if (!e) {
            t = alias[t]; // || 'generic';
            e = micro.insertTemplate(panelObj, t, p);
          }
        } // if
      } // if
    });

    hub.subscribe('/device/*?name', function (path, key, value) {
      document.title = value;
      document.querySelector("meta[name=application-name]").content = value;
    });

    function updateAsap(ev) {
      if (timer)
        window.clearTimeout(timer);
      timer = window.setTimeout(updateState, 20);
    }

    function updateState(ev) {
      if (timer)
        window.clearTimeout(timer);
      timer = null;

      fetch('/$board')
        .then(raw => raw.json())
        .then(json => {
          hub.publishObj(json);
        })
        .then(function (json) {
          timer = window.setTimeout(updateState, 4000);
        });
    } // updateState()

    function init() {
      // element definitions -> env.json -> config.json
      fetch('/env.json')
        .then(raw => raw.json())
        .then(function (json) {
          hub.publishObj(json);

          return fetch('/config.json');
        })
        .then(raw => raw.json())
        .then(function (c) {
          for (var t in c) for (var i in c[t]) {
            if (!c[t][i].title) c[t][i].title = t + '/' + i;
          }
          hub.publishObj(c);
        })
        .then(function () {
          updateState();
        });
    } // init()

    window.addEventListener('load', init);
  </script>
</body>

</html>