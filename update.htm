<!-- This is the source file for the built-in update dialog in HomeDing devices. -->

<!doctype html>
<html lang="en">

<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Web Update</title>
</head>

<body style="width:300px">
  <h1>Web Update</h1>
  <div style="display:grid">
    <progress value=0 max=1></progress>
    <span id='l'></span>
  </div>
  <div style="text-align: right;"><button>Start</button></div>

  <hr>
  <p style="text-align: right;"><a href="/updateicons.htm" title="next step" style="text-decoration: none;">&gt;&gt;&gt;</a></p>
  <script>
    var s = 0;
    // s == 0 => not started yet
    // s == 1 => fetching list
    // s == 2 => cleanweb
    // s == 3 => copy file 
    // s == 4 => wait for file finished 

    var repo = 'https://homeding.github.io/';
    var d = document;
    var eBar = d.querySelector('progress');
    var done = 0;
    var work = null;
    var timer = 0;
    var seed = "?" + new Date().valueOf();

    function log(t) {
      d.querySelector('#l').innerText = t;
    } // log

    function next() {
      s = 3;
    } // next

    if (location.hash) {
      repo += location.hash.substring(1) + '/';
    } else {
      repo += 'v09/';
    }
    log('loading from:\n' + repo);

    /** fetch list of files */
    function doS() {
      fetch(repo + 'list.txt' + seed)
        .then(function (result) {
          return result.text();
        })
        .then(function (t) {
          work = t.replace(/\r?\n/g, ';').replace(/;$/, '').split(';');
          eBar.max = work.length;
        });
    } // doS()


    // grab next file
    function doF() {
      s = 3; // wait
      var theItem = work.shift();

      // set progress
      eBar.value = ++done;
      log(theItem);

      if (theItem[0] === '-') {
        next();
      } else {
        fetch(repo + theItem + seed)
          .catch(next)
          .then(function (result) {
            return result.arrayBuffer();
          })
          .then(function (buf) {
            var formData = new FormData();
            formData.append('file', new Blob([buf]), '/' + theItem);
            fetch('/', { method: 'POST', body: formData }).then(next);
          });
      }
    } // doF()


    d.querySelector('button').addEventListener('click', function () {
      timer = window.setInterval(function () {
        if (s == 0) { // not yet started
          // fetch file list;
          log('get...');
          s++;
          doS();

        } else if ((s == 1) && (work)) {
          // clean files in filesystem first
          log('clean...');
          s++;
          fetch('/api/cleanweb')
            .then(function (result) {
              s++;
            });

          // } else if (s == 2)  { nothing... }

        } else if (s == 3) {
          if (work.length > 0) {
            doF();
          } else {
            window.clearInterval(timer);
            log('done');
          }

          // } else if (s == 4)  { nothing... }
        }
      }, 100);
    });
  </script>
</body>

</html>