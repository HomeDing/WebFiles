<!-- This is the source file for the built-in update dialog in HomeDing devices. -->

<!doctype html>
<html lang="en">

<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Web Update</title>
</head>

<body style="width:300px">
  <h1>Web Update</h1>
  <table style="width:300px">
    <tr>
      <td><progress value=0 max=1></progress></td>
    </tr>
    <tr>
      <td id='info'>.</td>
    </tr>
    <tr>
      <td align="right"><button>Start</button></td>
    </tr>
  </table>
  <hr>
  <p style="text-align: right;"><a href="/updateicons.htm" title="next step"
      style="text-decoration: none;">&gt;&gt;&gt;</a></p>
  <script>
    var repo = 'https://homeding.github.io/';
    var eStart = document.querySelector('button');
    var eBar = document.querySelector('progress');
    var eInfo = document.querySelector('#info');
    var work = { status: '0', list: null, files: 0, done: 0 };
    var timer = 0;
    var seed = "?" + new Date().valueOf();

    function log(t) {
      eInfo.innerText = t;
    } // log

    function next() {
      work.status = 'r';
    } // next

    if (location.hash) {
      repo += location.hash.substr(1) + '/';
    } else {
      repo += 'v03/';
    }
    log('loading from:\n' + repo);

    // fetch list of files
    function doS() {
      work.status = 'w'; // wait
      fetch(repo + 'list.txt' + seed)
        .then(function (result) {
          return result.text();
        })
        .then(function (txt) {
          var s = txt.replace(/\r?\n/g, ';');
          s = s.replace(/;$/, '');
          work.list = s.split(';');
          work.files = work.list.length;
          next();
        });
    } // doS()


    // grab next file
    function doF() {
      work.status = 'w'; // wait
      var theItem = work.list.shift();

      // set progress
      work.done++;
      eBar.max = work.files;
      eBar.value = work.done;
      eInfo.innerText = theItem; // log

      if (theItem[0] == '-') {
        // delete the file
        fetch('/' + theItem.substr(1), { method: 'DELETE' })
          .then(next).catch(next);

      } else {
        fetch(repo + theItem + seed)
          .catch(next)
          .then(function (result) {
            return result.arrayBuffer();
          })
          .then(function (buf) {
            var formData = new FormData();
            formData.append('file', new Blob([buf]), '/' + theItem);
            fetch('/', { method: 'POST', body: formData }).then(next);
          });
      };
    } // doF()


    eStart.addEventListener('click', function () {
      timer = window.setInterval(function () {
        if (work.status == '0') { // not yet started
          // fetch file list;
          doS();
        } else if (work.status == 'r') { // run
          if (work.list.length == 0)
            work.status = 'e';
          else
            doF();
        } else if (work.status == 'e') { // end
          window.clearInterval(timer);
          log('done');
        }
      }, 100);
    });
  </script>
</body>

</html>