<!doctype html>
<html lang="en">

<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />

  <title>Line Charts</title>

  <link Content-Type="text/css" href="/iotstyle.css" rel="stylesheet" />
  <style>
    pre.code {
      display: block;
      margin: 0.5em 0;
      border: solid 1px black;
      padding: 0.2em;
      font-family: Courier New, Courier, monospace;
      font-size: 0.75em;
      line-height: 1.2;
      color: black;
      background-color: rgb(255, 255, 240);
    }
  </style>
</head>

<body>
  <div class="container">
    <h1>Line Charts</h1>

    <p> <button id="doClear">clear</button> <button id="doDraw1">draw1</button> <button id="doDraw2">draw2</button>
      <button id="doDraw3">draw3</button> <button id="doDraw4">draw4</button></p>

    <object id="chartline" data="chartline.svg" type="image/svg+xml" style="width:800px;height:300px"></object>
    <hr />

    <p>Line charts can plot lines based on x/y data points on a 2-dimensional panel. </p>
    <p>As options the following additional elements can be added:</p>

    <ul>
      <li><b>VAxis</b> creates a vertical ruler for the y values and includes the major data values in the range of the
        given data.</li>
      <li><b>HAxis</b> creates a horizontal ruler for the x values and includes the major data values in the range of
        the given data.</li>
      <li><b>HLine</b></li>
      <li><b>Indicator</b></li>
      <li><b>Multiple charts</b> including multiple datasets can be placed on the same panel.</li>
    </ul>

    <p>Before adding any data to the chart the chart needs to be configured. This can be done by a function call for one
      chart at a time or by passing a complete configuration.</p>

    <h2>Adding a data bound chart</h2>

    <p>Adding a line chart element can be done by passing type and options to addChart function:
    </p>
    <pre class="code">
var chart = chartAPI.addChart('line', { linetype: 'line', color: 'black' });
</pre>

    <p>As an alternate the line chart can added within passing the whole configuration:</p>
    <pre class="code">
chartAPI.add(
  {
    charts: [
      {
        type: "line",
        linetype: 'line'
        color: 'darkblue'
      }
    ],
    showIndicator: true
  });
</pre>

    <p><b>line with linetype = 'line'</b> - This line chart adds a classic line from point to point in the sequence of
      points in the data.
    </p>

    <p><b>line with linetype = 'step'</b> - This line chart adds a stepping chart useful for data points that contain
      measurements over time
      without repeating same measurements.
    </p>

    <h2>Adding a vertical axis</h2>
    <pre class="code">
chartAPI.addVAxis();
</pre>

    <h2>Adding a horizontal axis</h2>
    <pre class="code">
chartAPI.addHAxis();
</pre>

    <h2>Adding a horizontal line</h2>
    <pre class="code">
chartAPI.addChart('hline', { data: 0 });
</pre>

    <h2>more</h2>
    <pre class="code">

  var chart = chartAPI.addChart();

interface GraphsData {
  id: number,
  type: "line", "vAxis", "hLine"
  data: Point[];
  box: Box; // only if relevant data 
  redraw: boolean; // needs a redraw
  svgObj: SVGElement;
  fBox: function(box) { return(box) };
  fDraw: function(g){}
}
</pre>

    <pre class="code">
  draw(n, data) -> dataset[n] -> depending VAxis, HAxis, chartline.
</pre>

    <h3>Line Chart Data</h3>

    <p>The data passed to the draw function. If there are multiple charts displayed at the same time
      the chart offset needs to be added as well.</p>

    <pre class="code">
        var myData = [
          {
            title: "used",  // { "type": "string" }
            value: 8000,    // { "type": "number" }
            color: "lime"   // { "type": "string" }
          }, {
            title: "free",  // { "type": "string" }
            value: 12000,   // { "type": "number" }
            color: "silver"   // { "type": "string" }
          }];
        chartAPI.draw(myData);
        </pre>


    <h3>The phases of drawing</h3>

    <p>The draw function will not actual create the chart; this is deferred to allow some adjustments by the ruler
      graphs. E.g. when data in the range 1-99 is in use the VAxis may change the range to 0-100 so some good data
      levels can be displayed in the ruler area.
    </p>

    <ul>
      <li>When new data is added or data is modified the drawing process is deferred by using a timer.
        This timer enables to add all required elements before actual creating the full chart.
      </li>
      <li>The the box containing all data points is calculated and stored in the displayBox.
        When the displayBox was not changed the rulers do not have to be re-created but the data bound graphs will.
      </li>
      <li>
        All graphs now can be drawn using the scale of the displayBox.
      </li>
    </ul>

    <h3>Line Chart Colors</h3>

    <p>Any color can be used in the color properties that is understood by SVG.
      It can passed in the options when crating a chart of a hLine.</p>
  </div>

  <hr />

  <script>
    var chartObj = document.getElementById('chartline');
    var chartAPI;

    function lineClear() { chartAPI.clear(); }

    function lineDraw1() {
      chartAPI.clear();
      var chart = chartAPI.addChart('line', { linetype: 'line' });

      chartAPI.addVAxis();
      chartAPI.addHAxis();
      chartAPI.addChart('hline', { data: 0 });

      var data = [{ x: 0, y: 2 }, { x: 1, y: 4 }, { x: 2, y: 6 }, { x: 3, y: 5 }, { x: 4, y: 7 }];
      chartAPI.draw(chart, data);
    }

    function lineDraw2() {
      chartAPI.clear();
      var chart = chartAPI.addChart('line', { linetype: 'steps', color: 'red' });

      chartAPI.addVAxis();
      chartAPI.addHAxis();

      var data = [{ x: 0, y: 2 }, { x: 1, y: 5 }, { x: 2, y: 4 }, { x: 3, y: 6 }, { x: 4, y: 5 }, { x: 5, y: 7 }];
      chartAPI.draw(chart, data);
    }

    function lineDraw3() {
    }

    function lineDraw4() {
    }

    window.addEventListener('load', function () {
      chartAPI = chartObj.getSVGDocument().api;
      lineDraw1();

      document.getElementById('doClear').addEventListener('click', lineClear);
      document.getElementById('doDraw1').addEventListener('click', lineDraw1);
      document.getElementById('doDraw2').addEventListener('click', lineDraw2);
      document.getElementById('doDraw3').addEventListener('click', lineDraw3);
      document.getElementById('doDraw4').addEventListener('click', lineDraw4);

    });
  </script>
</body>

</html>