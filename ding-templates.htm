<div class='col card' u-control='dht' id='${id}' microID="${id}" u-behavior='generic'>
  <div class="block">
    <img title="${id}" src="/i/dht.svg" style="float: left;height:5rem;margin-right:1rem"/>
    <span class="activeState" u-active='active'></span>
    <span class="setconfig"></span>
    <table>
      <tr>
        <td colspan="3">
          <h4 u-text="title"></h4>
        </td>
      </tr>
      <tr>
        <td colspan="3"><span u-text='description'></span></td>
      </tr>
      <tr>
        <td style="font-size: 2rem"><span  u-text='temperature'>__.__</span>&deg;C</td>
        <td style="width:2rem"></td>
        <td style="font-size: 2rem"><span u-text='humidity'>__.__</span>%</td>
      </tr>
      <tr>
        <td>Temperature</td>
        <td></td>
        <td>Humidity</td>
      </tr>
    </table>
  </div>
</div>

<div class='col card' u-control='timer' id='${id}' microID='${id}' u-behavior='timer'>
  <div class="block header">
    <h2><img src="/i/timer.svg" class='Icon'/>${id}</h2>
      <h4 u-text='description'></h4>
      <span class="activeState" u-active='active'></span>
      <span class="setconfig"></span>
  </div>
  <div class="block">
    <label>wait:</label><span u-text='waittime'>.</span>
    <label>pulse:</label><span u-text='pulsetime'>.</span>
  </div>
  <div class="block">
    <div class="u-bar">
      <span class="pulse"></span>
      <span class="current"></span>
    </div>
  </div>
  <hr />
  <div class="block">
    <button u-action='start' value='1'>Start</button>
    <button u-action='next' value='1'>Next</button>
    <button u-action='stop' value='1'>Stop</button>
  </div>
</div>

<script>
  jcl.registerBehavior("timer", {
    inheritFrom: GenericElementBehavior,
    wt: 0,
    pt: 0,
    ct: 0,
    time: 0,

    _timeToSec: function (v) {
      v = v.toLowerCase();
      if (v.endsWith('h')) {
        v = parseInt(v, 10) * 60 * 60;
      } else if (v.endsWith('m')) {
        v = parseInt(v, 10) * 60;
      } else if (v.endsWith('s')) {
        v = parseInt(v, 10);
      } // if
      return (v);
    },

    newData: function (path, key, value) {
      // alert(key);
      if (key == "waittime") {
        this.wt = this._timeToSec(value);
      } else if (key == "pulsetime") {
        this.pt = this._timeToSec(value);
      } else if (key == "cycletime") {
        this.ct = this._timeToSec(value);
      } else if (key == "time") {
        this.time = this._timeToSec(value);
      }

      if (this.ct < 0 + this.wt + this.pt)
        this.ct = 0 + this.wt + this.pt

      // update bars
      if (this.ct > 0) {
        var el = this.querySelector(".u-bar");
        var f = el.clientWidth / this.ct;
        var pto = el.querySelector(".pulse");
        pto.style.left = Math.floor(this.wt * f) + "px";
        pto.style.width = Math.floor(this.pt * f) + "px";
        var cto = el.querySelector(".current");
        cto.style.width = Math.floor(this.time * f) + "px";
      }
    } // newData()
  }); // register Timer Element Behavior
</script>

<div class='col card' u-control='button' id='${id}' microID="${id}" u-behavior='button'>
  <div class="block header">
    <h2><img src="/i/button.svg" class='Icon' >${id}</h2>
      <h4 u-text='description'></h4>
      <span class="activeState" u-active='active'></span>
      <span class="setconfig"></span>
  </div>
  <div class="block">
    <span><img src="/i/button.svg" class="u-button" style="border-radius:3rem; float: left;height:5rem;margin-right:1rem"></span>
  </div>
</div>

<script>
  jcl.registerBehavior("button", {
    inheritFrom: GenericElementBehavior,

    onpointerdown: function (e) {
      var src = e.srcElement;
      if (src.classList.contains('u-button')) {
        src.classList.add('active');
        dispatch(this.microid, 'value', 1);
      } // if
    },
    onpointerup: function (e) {
      var src = e.srcElement;
      if (src.classList.contains('u-button')) {
        src.classList.remove('active');
        dispatch(this.microid, 'value', 0);
      } // if
    }
  }); // register Button Element Behavior
</script>

<div class='col card' u-control='digitalout' id='${id}' microID="${id}" u-behavior='generic'>
  <div class="block header">
    <h2><img src="/i/digitalout.svg" class='Icon'/>${id}</h2>
      <h4 u-text='description'></h4>
      <span class="activeState" u-active='active'></span>
      <span class="setconfig"></span>
  </div>

  <div class="block">
    <img src="/i/digitalout.svg" style="float: left;height:5rem;margin-right:1rem">
    <span class="u-bool" u-active='value' style="position: absolute;
        top: 4.4rem;right: 0.4rem;height: 1.4rem;width: 1.4rem;border-radius: 0.7rem;" ></span>
  </div>
</div>

<div class='col card' u-control='pwmout' id='${id}' u-behavior='pwmout' microID='${id}'>
  <div class="block header">
    <h2><img src="/i/pwmout.svg" class='Icon' />${id}</h2>
      <h4 u-text='description'></h4>
      <span class="activeState" u-active='active'></span>
      <span class="setconfig"></span>
  </div>
  <div class="block" style="position: relative;min-height: 5rem">
    <span class="u-level" style="position:absolute;right:0.4em;top:0.4em;"></span>
    <div style="font-size: 2rem">
      <span u-text="value"></span> / <span u-text="range"></span>
    </div>
  </div>
</div>

<script>
  jcl.registerBehavior("pwmout", {
    inheritFrom: GenericElementBehavior,
    range: 255,
    init: function () {
      hub.subscribe(this.microid + "?*", this.newValue.bind(this));
    },
    newValue: function (path, key, value) {
      if (key == "value") {
        var o = this.querySelector(".u-level");
        var h = o.offsetHeight;
        var bh = h * value / this.range;
        if (bh > h - 1) bh = h - 1;
        if (bh < 1) bh = 1;
        o.style.borderBottomWidth = bh + "px";
      }
    }
  }); // register pwmout Element Behavior
</script>

<div class='col card' u-control='value' id='${id}' u-behavior='generic' microID='${id}'>
    <div class="block header">
      <h2><img src="/i/${type}.svg" class='Icon' />${id}</h2>
        <h4 u-text='description'></h4>
        <span class="activeState" u-active='active'></span>
        <span class="setconfig"></span>
    </div>
    <div class="block Element">
      <span u-text="value" style="position:absolute;font-size:2rem;width:3em;text-align: right;height:1em;right:0.4em"></span>
    </div>
  </div>
