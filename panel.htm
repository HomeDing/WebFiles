<!doctype html>
<html>

<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Element Panel</title>
  <link href="/iotstyle.css" rel="stylesheet" type="text/css">

  <script src="micro.js"></script>
  <script src="microsvg.js"></script>
  <script src="panel.js"></script>

  <style>
    #panel {
      fill: none;
      background-color: silver;
      background-image: linear-gradient(to top, rgba(0, 0, 0, .2) 1px, transparent 1px),
        linear-gradient(to left, rgba(0, 0, 0, .2) 1px, transparent 1px);
      background-size: 12px 12px;
    }

    #panel #templates {
      display: none;
    }

    #links>line,
    #links>path {
      stroke: #080808;
      stroke-width: 3;
      stroke-linecap: round;
      marker-end: url(#arrow);
    }

    .node {
      font-size: 12px;
      font-family: sans-serif;
      fill: #000000;
      fill-opacity: 1;
      stroke: none;
      font-style: normal;
      font-weight: normal;
    }

    .node rect {
      fill: #d4dced;
      stroke-width: 0;
    }

    .node circle {
      fill: #505050;
      stroke-width: 0;
    }

    .node text {
      font-size: 10px;
    }

    #Grid {
      fill: #e0e0e0;
      stroke: none
    }
  </style>
</head>

<body>
  <div class="container">
    <div class="row u-header">
      <h1>Panel</h1>
    </div>
    <div class="row u-navbar">
      <a class="button" href="/">Home</a>
      <a class="button" href="/board.htm">Board</a>
      <a class="button" href="/microide.htm">IDE</a>
      <a class="button" href="/log.htm">Log</a>
      <span class="gap"></span>
      <button id="unlock">unlock</button>
      <button id="auto">auto</button>
      <button id="sysButton">sys</button>
    </div>

    <div class="row" style="margin-top:0.5em;user-select: none;">
      <svg id="panel">
        <defs>
          <marker id="arrow" markerWidth="6" markerHeight="6" refX="16" refY="8" orient="auto" viewBox="0 0 16 16">
            <path d="M0,0 L0,16 L16,8 z" fill="currentColor" />
          </marker>
        </defs>
        <rect height="100%" width="100%"></rect>
        <g id="templates">
          <g draggable="true" class="node">
            <title></title>
            <rect width="64" height="64" rx="8"></rect>
            <use class="icon" x="16" y="8" width="32" height="32" color="#203050" href="" />
            <use class="config" x="48" y="4" width="12" height="12" color="#203050" href="/icons.svg#config" />
            <text class="id" x="32" y="56" text-anchor="middle">subtitle</text>
            <circle pin="in" cx="8" cy="40" r="5"></circle>
            <circle pin="out" draggable="true" cx="56" cy="40" r="5"></circle>
          </g>
        </g>
        <g id="viewport">
          <g id="nodes"></g>
          <g id="links"></g>
        </g>

        <!-- <g id="connect" style="fill:lime">
          <rect x=474 y=112 width="64" height="64" rx="8"></rect>
        </g> -->

      </svg>
    </div>
  </div>
  </div>

  <script>
    // GRID dimension and size
    const PANEL_GRIDSIZE = 72; // px
    const NODE_SIZE = 64; // px
    const PANEL_WIDTH = 16;
    const PANEL_HEIGHT = 12;
    const XPref = 64; // x-prefering curve for Edges
    const ITERATE = 200;

    // https://cs.brown.edu/people/rtamassi/gdhandbook/chapters/force-directed.pdf
    class LAYOUT {
      XY = "uXY"; // key in localstorage for placements

      nodes = {};
      edges = [];

      // add a new node
      addNode(id, t, s) {
        var n = this.nodes[id] ?? (this.nodes[id] = {});
        n.id = id;
        n.icon = t;
        n.conf = s;
        n._x = 0;
        n._y = 0;
        n._fx = 0;
        n._fy = 0;
      }

      // add a new edge
      addEdge(srcPath, tarPath) {
        this.edges.push({
          src: srcPath,
          srcPin: "out",
          tar: tarPath,
          tarPin: "in"
        });
      }

      // analyse connections, find unconnected Nodes.
      analyseChains() {
        // reset in/out counters to 0
        for (const n of Object.values(this.nodes)) {
          n._out = n._in = 0;
        }

        // remove edge going into the nirvana
        this.edges = this.edges.filter(l => {
          const fits = (this.nodes[l.src] && this.nodes[l.tar]);

          if (!fits) {
            console.log("undeliverable action:", l.src, l.tar);
          }

          return (fits);
        });

        this.edges.forEach(l => {
          this.nodes[l.src]._out++;
          this.nodes[l.tar]._in++;
        });
      }


      placeSingleNodes() {
        let px = 1;
        for (const n of Object.values(this.nodes)) {
          if (n._out == 0 && n._in == 0) {
            n._x = px++;
            n._y = 0;
            n._fixed = true;
          }
        }
      } // placeSingleNodes()


      loadPlacements() {
        // read position from localstorage
        const locs = JSON.parse(window.localStorage.getItem(this.XY) || "{}");

        let px = 1;
        for (const [id, n] of Object.entries(this.nodes)) {
          if ((!n._fixed) && (locs[id])) {
            n._x = locs[id]._x;
            n._y = locs[id]._y;
            n._fixed = true;
          }
        }
      } // loadPlacements()
    }

    const layout = new LAYOUT();

    function constrain(val, min, max) {
      if (val < min) {
        val = min;
      } else if (val > max) {
        val = max;
      }
      return (val);
    } // constrain()

    document.getElementById('unlock').addEventListener("click", evt => {
      calcReset(true);
    });

    document.getElementById('auto').addEventListener("click", evt => {
      for (let n = 0; n < ITERATE; n++) moveNodes();
      drawNodes();
      drawEdges();
    });


    var params = getHashParams({
      sys: false
    });
    window.addEventListener("hashchange", function() {
      window.location.reload();
    });

    document.getElementById('sysButton').addEventListener('click', function(evt) {
      params.sys = !toBool(params.sys);
      window.location.hash = 'sys=' + params.sys;
    });

    async function loadPlugins() {
      var ret;
      if (!document.querySelector('dialog#addElement')) {
        // lazy load dialogs.
        ret = fetch("./board-new.htm")
          .then(res => res.text())
          .then(txt => {
            document.body.appendChild(document.createRange().createContextualFragment(txt));
          });
      }
      return (ret);
    } // loadPlugins()

    // initiate a fetch with JSON res expected.
    async function fetchJSON(url, options) {
      var p = fetch(url, options)
        .then(raw => raw.json());
      return (p);
    }

    // Element definitions and config+state of running elements
    const uElements = {
      defs: {},
      impl: [],
      env: {},
      config: {},
      state: {}
    };

    var panelObj = document.getElementById('panel');
    var linksObj = document.getElementById('links');
    var viewObj = document.getElementById('viewport');
    const connectObj = document.getElementById('panel');

    panelObj.style.width = PANEL_GRIDSIZE * PANEL_WIDTH + "px";
    panelObj.style.height = PANEL_GRIDSIZE * PANEL_HEIGHT + "px";

    var DragObj = null;
    var DragMode = null;
    var DragOffset = null;

    // nodes are all existing elements from the device configuration
    // extended by _x, _y
    var nodes = {};
    var edges = [];

    /*
    HomeDing config data model ->
      create nodes = {id, xPos, _y, onXXX, obj }
      create edges = {src, srcPin, tar, tarPin, obj}
    */

    // create all nodes and edges from the HomeDing config files
    function createNodes(conf) {
      for (let [eType, elem] of Object.entries(conf)) {
        eType = eType.toLowerCase();

        for (let [eID, eConf] of Object.entries(elem)) {
          eID = eID.toLowerCase();

          if (toBool(params.sys) || (!uElements.defs[eType]) || (!toBool(uElements.defs[eType].sys))) {
            // show this one.
            const id = `${eType}/${eID}`;

            // create node
            layout.addNode(id, eType, eConf);

            // create edges
            for (let [key, actions] of Object.entries(eConf)) {
              if (key.substring(0, 2) == 'on') {
                actions.split(',').forEach(function(a) {
                  layout.addEdge(id, a.split('?')[0]);
                });
              }
            }
          }
        }
      }
    } // createNodes()


    // initial placement of all nodes
    function placeNodes() {
      var py = 1;

      layout.analyseChains();
      layout.placeSingleNodes();
      layout.loadPlacements();

      // heuristic initial placement from left to right
      for (const n of Object.values(this.nodes)) {
        if (!n._fixed) {
          // nodes with edges vertically;
          if (n._in === 0) {
            n._x = 3;
          } else if (n._out === 0) {
            n._x = 8;
          } else {
            n._x = 6 + n._in - n._out;
          }
          n._x = Math.max(n._x, 0);
          n._y = py++;
        }
      } // for
    } // placeNodes()


    function calcReset(unlock = false) {
      for (const n of Object.values(this.nodes)) {
        n._fx = 0;
        n._fy = 0;
        if ((unlock) && (n._out > 0 || n._in > 0)) {
          n._fixed = false;
        }
      }
    }

    // calc force given by 2 nodes repel each other 
    function calcRepel(node1, node2) {
      const dx = node2._x - node1._x;
      const dy = node2._y - node1._y;
      const d2 = dx * dx + dy * dy;

      const f1 = 0.1;
      const fx = f1 * dx / d2;
      const fy = f1 * dy / d2;

      node1._fx -= fx;
      node1._fy -= fy;
      node2._fx += fx;
      node2._fy += fy;
    } // calcRepel()


    // calc force given by 2 connected nodes attacting each other 
    function calcSpring(node1, node2) {
      if (node1 && node2) {
        const dx = node2._x - node1._x;
        const dy = node2._y - node1._y;
        const d2 = dx * dx + dy * dy;
        const d = Math.sqrt(d2);

        const f1 = 2 * Math.log(d / 2);
        let fx = f1 * dx / d;
        let fy = f1 * dy / d;

        // bended springs cause a force as well 
        fx -= 0.3;
        fy = 2 * fy;

        node1._fx += fx;
        node1._fy += fy;
        node2._fx -= fx;
        node2._fy -= fy;
      }
    } // calcSpring


    function moveForce(node) {
      if (!node._fixed) {
        node._x = constrain(node._x + node._fx * 0.1, 0, PANEL_WIDTH - 1);
        node._y = constrain(node._y + node._fy * 0.1, 1, PANEL_HEIGHT - 1);
      }
      // console.log(node._y);
      // if (node._y > PANEL_HEIGHT)
      //   debugger;
      // node._y = constrain(node._y + node._fy * 0.1, 1, PANEL_HEIGHT);
    }

    function moveNodes() {
      calcReset();
      const prev = [];
      for (const node1 of Object.values(nodes)) {
        if (node1._y > 0) {
          // only use nodes with edges.
          for (const node2 of prev) {
            calcRepel(node1, node2);
          }
          prev.push(node1);
        }
      }

      for (const edge of edges) {
        calcSpring(nodes[edge.src], nodes[edge.tar]);
      }

      for (const node of Object.values(nodes)) {
        moveForce(node);
      }
    } // moveNodes()


    // create / update svg objects for all nodes
    function drawNodes() {
      for (var nodeId in nodes) {
        var t = nodeId.split('/')[0];
        var e = nodes[nodeId];
        var ed = uElements.defs[t];

        var obj = e.obj;
        if (!obj) {
          // create a new svg object for node
          var nodesObj = document.getElementById('nodes');
          obj = e.obj = document.querySelector('#templates .node').cloneNode(true);
          nodesObj.appendChild(obj);
          obj.id = nodeId;
          // disable outgoing pin ?
          if (ed) {
            if ((ed.events) && (ed.events.length == 0)) {
              var pin = obj.querySelector('[pin="in"]');
              if (pin) pin.style.display = "none";
            }
            if ((ed.actions) && (ed.actions.length == 0)) {
              var pin = obj.querySelector('[pin="out"]');
              if (pin) pin.style.display = "none";
            }
          }

          obj.querySelector('.config').addEventListener('click', function(evt) {
            var t = evt.target;
            while (t && !t.classList.contains('node')) t = t.parentElement;
            const d = t.getAttribute('data');
            const id = t.getAttribute('id').split('/');
            DialogFormClass.openModalForm('configElement', { ...JSON.parse(d), type: id[0], id: id[1] });
          });
        }

        // update svg object by node properties
        if (e.icon)
          obj.querySelector('.icon').setAttribute("href", "/icons.svg#" + e.icon);
        if (e.conf)
          obj.querySelector('title').textContent = JSON.stringify(e.conf, null, 2);
        obj.setAttribute("data", e.conf);
        obj.querySelector('.id').firstChild.textContent = nodeId;

        moveSVGGroup(obj, e._x * PANEL_GRIDSIZE + 4, e._y * PANEL_GRIDSIZE + 4);
      } // for

      // save pos
      const uPos = {};
      Object.values(nodes).forEach(n => {
        if (n._fixed)
          uPos[n.id] = { _x: n._x, _y: n._y };
      });
      window.localStorage.setItem(layout.XY, JSON.stringify(uPos));
    } // drawNodes()


    // create / update all svg objects edges to current position of nodes
    function drawSingleEdge(obj, aPos, ePos) {
      if (!obj) {
        obj = linksObj.ownerDocument.createElementNS("http://www.w3.org/2000/svg", 'path');
        linksObj.appendChild(obj);
      } // if
      obj.setAttribute("d", `M ${aPos.x},${aPos.y} C ${aPos.x + XPref},${aPos.y} ${ePos.x - XPref},${ePos.y} ${ePos.x - 12},${ePos.y} L ${ePos.x},${ePos.y}`);
      return (obj);
    } // drawSingleEdge()


    // create / update all svg objects edges to current position of nodes
    function drawEdges() {
      var aPos, ePos;

      for (var n = 0; n < edges.length; n++) {
        var f = edges[n];
        var sObj = nodes[f.src];
        var tObj = nodes[f.tar];

        if (sObj && tObj) {
          var obj = f.obj;
          aPos = _pinPos(sObj, f.srcPin);
          ePos = _pinPos(tObj, f.tarPin);

          // spline version
          if (!obj) {
            obj = f.obj = linksObj.ownerDocument.createElementNS("http://www.w3.org/2000/svg", 'path');
            linksObj.appendChild(obj);
          } // if
          obj.setAttribute("d", `M ${aPos.x},${aPos.y} C ${aPos.x + XPref},${aPos.y} ${ePos.x - XPref},${ePos.y} ${ePos.x - 12},${ePos.y} L ${ePos.x},${ePos.y}`);
        } // for
      }
    } // drawEdges()

    // get configuration data
    var p2 = fetchJSON('/elements.json').then(json => uElements.defs = json);
    var p3 = fetchJSON('/env.json').then(json => uElements.env = json);
    var p4 = fetchJSON('/config.json').then(json => uElements.config = json);

    // start when all data is available
    Promise.all([p2, p3, p4]).then(function() {
      hub.write('env', JSON.stringify(uElements.env));
      hub.write('config', JSON.stringify(uElements.config));
      createNodes(uElements.env);
      createNodes(uElements.config);

      nodes = layout.nodes;
      edges = layout.edges;

      placeNodes();
      for (let n = 0; n < ITERATE; n++) moveNodes();
      drawNodes();
      drawEdges();
      loadPlugins();
    });

    // === drag & drop

    var _conPos;
    var _conObj;


    panelObj.addEventListener("mousedown", function(evt) {
      if (!DragObj) {
        var o = evt.target;
        // check for a draggable object.
        while (o && o.attributes && (!o.attributes["draggable"]))
          o = o.parentNode;
        if (o && o.attributes && (o.attributes["draggable"]))
          DragObj = o;
      }

      if (DragObj) {
        if (DragObj.getAttribute('pin') === 'out') {
          DragMode = 'c';
          // create 
          DragOffset = getSVGPos(panelObj, evt);
          DragObj = createSVGNode(panelObj, 'circle', {
            cx: DragOffset.x,
            cy: DragOffset.y,
            r: 10,
            style: 'fill:lime'
          });
          _conPos = { x: DragOffset.x, y: DragOffset.y };
          _conObj = drawSingleEdge(undefined, _conPos, _conPos);

        } else {
          DragMode = 'n';
          // calculate Drag Offset = mouse position - drag object position
          DragOffset = getSVGPos(panelObj, evt);
          var cc = DragObj.getCTM();
          DragOffset.x -= cc.e;
          DragOffset.y -= cc.f;
        }
      }
    }); // mouseDown


    panelObj.addEventListener("mousemove", function(evt) {
      if (DragObj) {
        var DragPos = getSVGPos(panelObj, evt);
        moveSVGGroup(DragObj, DragPos.x - DragOffset.x, DragPos.y - DragOffset.y);
        if (DragMode === 'n') {
          drawEdges();
        }
        else {
          drawSingleEdge(_conObj, _conPos, DragPos);
        }
      } // if
    }); // mousemove


    panelObj.addEventListener("mouseup", function(evt) {
      if (DragObj) {
        var DragPos = getSVGPos(panelObj, evt);

        if (DragMode === 'c') {
          // connector drop
          DragObj.remove();
          _conObj.remove();

          // find target node
          const x = DragPos.x / PANEL_GRIDSIZE;
          const y = DragPos.y / PANEL_GRIDSIZE;
          const node = Object.values(nodes).find(n =>
            (n._x <= x) && (n._x + 1 > x) && (n._y <= y) && (n._y + 1 > y)
          );

          console.log(node);
          console.log(node.id);
          // TODO: start connect dialog


        } else if (DragMode === 'n') {
          // node drop
          const node = Object.values(nodes).find(n => (n.obj === DragObj));
          node._x = Math.floor(6 * (DragPos.x - DragOffset.x) / PANEL_GRIDSIZE) / 6;
          node._y = Math.floor(6 * (DragPos.y - DragOffset.y) / PANEL_GRIDSIZE) / 6;
          node._fixed = true;

        }

        // for (var n in nodes) {
        //   if (nodes[n].obj === DragObj) {
        //     nodes[n]._x = Math.floor(6 * (DragPos.x - DragOffset.x) / PANEL_GRIDSIZE) / 6;
        //     nodes[n]._y = Math.floor(6 * (DragPos.y - DragOffset.y) / PANEL_GRIDSIZE) / 6;
        //     nodes[n]._fixed = true;
        //     break;
        //   }
        // } // for
        drawNodes();
        drawEdges();

        DragObj = null;
      } // if
    }); // mouseup

    if (window !== window.top) {
      // disable header and navbar in portal mode.
      document.querySelector('.u-header').style.display = 'none';
      document.querySelector('.u-navbar').style.display = 'none';
    } // if

  </script>
</body>

</html>