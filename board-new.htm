<dialog id="addElement" u-is="dialogform">
  <h2>Add a new Element</h2>
  <div class="u-close" u-action="close"></div>
  <form is="form-json" method="dialog">
    <div class="form-grid">
      <label>Type:</label>
      <select name="type" value="0">
        <option disabled selected hidden value="0">Select Element...</option>
      </select>

      <label>ID:</label>
      <input name="id" required pattern="[0-9a-z]+" placeholder="enter a name ...">
    </div>
    <div><button u-action="next:configElement" type="submit" style="float:right">Next</button></div>
  </form>
</dialog>

<dialog id="configElement" u-is="dialogform">
  <h2>Config <span u-text="type"></span>/<span u-text="id"></span></h2>
  <div class="u-close" u-action="close"></div>

  <form is="form-json" method="dialog">
    <div class="form-grid"></div>
    <div><button u-action="done" type="submit" style="float:right">save</button></div>
  </form>
</dialog>

<dialog id="action" u-is="dialogform">
  <h2>Config <span u-text="srcId">/t/0</span>.<span u-text="srcEvent">onSome</span></h2>
  <div class="u-close" u-action="close"></div>

  <form method="dialog" is="form-json">
    <div class="form-grid">
      <label>Source:</label><input name="srcId" />
      <label>Event:</label><select name="srcEvent"></select>

      <label>Target:</label><select name="target">
        <option disabled selected hidden>Select target...</option>
      </select>
      <label>Action:</label><select name="action"></select>
      <label>Value:</label><input name="value" value="$v" />
    </div>
    <div><button u-action="return" style="float:right">Save</button></div>
  </form>
</dialog>

<script>
  function lowerKeys(d) {
    const out = {};
    Object.entries(d).forEach(([key, value]) => {
      out[key.toLowerCase()] = value;
    });
    return (out);
  }

  // get definitions for an element type
  function getDefs(id) {
    const type = id.split('/')[0];
    return (uElements.defs[type] ?? {});
  }

  let d2 = document.querySelector('dialog#addElement');

  // new Element dialog
  d2.addEventListener('open', evt => {
    const form = evt.detail.form;

    // populate SELECT with available element types
    var sel = form.querySelector('select[name=type]');
    if ((sel) && (sel.options.length <= 1)) {
      Object.keys(uElements.defs).forEach(function(e) {
        var o = createHTMLElement(sel, 'option', { value: e });
        o.textContent = e;
        o.disabled = !uElements.impl.includes(e);
      });
    }
  });


  // Element config dialog
  let d3 = document.querySelector('dialog#configElement');
  d3.addEventListener('open', evt => {
    const data = lowerKeys(evt.detail.data);
    const fg = d3.querySelector('.form-grid');
    fg.innerHTML = '';

    function add(k, isEvent, isAction) {
      createHTMLElement(fg, 'label').textContent = k + ':';
      const g = createHTMLElement(fg, 'div', { class: 'form-inline' });

      createHTMLElement(createHTMLElement(g, 'label'), 'img', { src: (isEvent ? '/i/start.svg' : '/i/no.svg') });
      const o = createHTMLElement(g, 'input', { name: k, style: 'width:18ch' });
      if (data[k.toLowerCase()])
        o.value = data[k.toLowerCase()];

      let a = createHTMLElement(createHTMLElement(g, 'label'), 'img', { src: (isAction ? '/i/start.svg' : '/i/no.svg') });
      if (isAction) {
        a.setAttribute('u-action', 'action');
        a.setAttribute('_action', k);
      }
    } // add()

    // create properties, events and actions inputs
    d3.setAttribute('_id', data.type + '/' + data.id);
    var d = getDefs(data.type);
    getDefs("element").properties.forEach(k => add(k, false, false));
    if (d?.properties) { d.properties.forEach(k => add(k, false, false)); }
    if (d?.events) { d.events.forEach(k => add(k, true, false)); }
    if (d?.actions) { d.actions.forEach(k => add(k, false, true)); }
  });

  d3.addEventListener('click', evt => {
    const tar = evt.target;
    var ua = tar.getAttribute('u-action');
    if (ua == 'action') {
      DialogFormClass.openModalForm('action', {
        srcId: d3.getAttribute('_id'),
        srcEvent: tar.getAttribute('_action'),
      }, function(data) {
        // result of action dialog 
        const srcEvent = tar.getAttribute('_action');
        var fld = d3.querySelector('input[name="' + srcEvent + '"]');
        fld.value = data.target + '?' + data.event + "=" + data.value;
      });
    }
  });


  d3.addEventListener('submit', evt => {
    const oForm = evt.target;
    const uSub = evt.submitter;

    if (uSub && oForm) {
      const ua = uSub.getAttribute('u-action');
      if (ua === 'done') {
        changeConfig(d3.getAttribute('_id'), oForm.getJsonData());
      }
    }

  });

  // Action config dialog
  let d4 = document.querySelector('dialog#action');
  d4.addEventListener('open', evt => {
    const form = evt.detail.form;
    const data = evt.detail.data;

    const oTarget = form.querySelector('SELECT[name=target]');
    const oSrcEvent = form.querySelector('SELECT[name=srcEvent]');
    oTarget.innerHTML = '';

    function listEvents() {
      const def = getDefs(data.srcId).actions;
      if (def) {
        def.forEach(a => { createHTMLElement(oSrcEvent, 'option', { value: a }).textContent = a; });
      }
    }

    function listActions() {
      const oEvent = form.querySelector('SELECT[name=action]');
      oEvent.innerHTML = '';
      oEvent.value = '';
      oEvent.disabled = false;
      createHTMLElement(oEvent, 'option', { disabled: true, selected: "selected", hidden: "hidden", value: '' }).textContent = 'Please select event...';

      const def = getDefs(data.tarId).events;
      if (def) {
        def.forEach(a => { createHTMLElement(oEvent, 'option', { value: a }).textContent = a; });
      }
    }

    if (data.srcEvent) {
    } else {
      listEvents();
    }


    if (data.tarId) {
      createHTMLElement(oTarget, 'option', { value: data.tarId }).textContent = data.tarId;
      oTarget.selected = 1;
      listActions();

      // TODO: add actions.
    } else {
      // populate target dropdown with existing type/id elements
      createHTMLElement(oTarget, 'option', { disabled: "disabled", selected: "selected", hidden: "hidden" }).textContent = 'Please select target...';
      for (t in uElements.config) {
        for (i in uElements.config[t]) {
          const id = t + '/' + i;
          createHTMLElement(oTarget, 'option', { value: id }).textContent = id;
        }
      }
      oTarget.disabled = false;
    }

    oTarget.addEventListener('change', (evt) => {
      // populate event dropdown with existing events on selected target
      const oEvent = form.querySelector('SELECT[name=event]');
      oEvent.disabled = "";
      oEvent.innerHTML = '';
      createHTMLElement(oEvent, 'option', { disabled: "disabled", selected: "selected", hidden: "hidden" }).textContent = 'Please select event...';

      data.tarId = oTarget.value;
      var el = oTarget.value.split('/');
      var def = uElements.defs[el[0]].events;

      if (def) {
        def.forEach(a => {
          createHTMLElement(oEvent, 'option', { value: a }).textContent = a;
        });
      }
    });
  });

</script>