<dialog id="newElement" is="u-form-dialog">
  <h2>Add a new Element</h2>
  <div class="u-close" u-action="cancel"></div>
  <form is="u-form-json" method="dialog">
    <div class="form-grid">
      <label>Type:</label>
      <select name="type" title="Select Element Type" required>
        <option disabled selected hidden value="">Select Element...</option>
      </select>
      <label>ID:</label>
      <input name="id" required pattern="[0-9a-z]+" placeholder="enter a name ..." maxlength="12">
    </div>
    <div><button u-action="next:configElement" style="float:right">Next</button></div>
  </form>
</dialog>

<dialog id="configElement" is="u-form-dialog">
  <h2><span u-text="type"></span>/<span u-text="id"></span> Configuration</h2>
  <div class="u-close" u-action="cancel"></div>

  <form is="u-form-json" method="dialog">
    <div class="form-grid"></div>
    <div><button u-action="save" style="float:right">save</button></div>
  </form>
</dialog>

<dialog id="action" is="u-form-dialog">
  <h2>Event Configuration</h2>
  <div class="u-close" u-action="cancel"></div>

  <form method="dialog" is="u-form-json">
    <div class="form-grid">
      <h4 class="wide">on Event:</h4>
      <label>Source:</label><input name="srcId" required readonly />
      <label>Event:</label><select name="event" required></select>
      <h4 class="wide">send Action:</h4>
      <label>Target:</label><select name="target" required></select>
      <label>Action:</label><select name="action" required></select>
      <label>Value:</label><input name="value" value="$v" required />
    </div>
    <div><button u-action="ok" style="float:right">OK</button></div>
  </form>
</dialog>

<script>
  function lowerKeys(d) {
    const out = {};
    Object.entries(d).forEach(([key, value]) => {
      out[key.toLowerCase()] = value;
    });
    return (out);
  }

  // get definitions for an element type
  function getDefs(id) {
    const type = id.split('/')[0];
    return (uElements.defs[type] ?? {});
  }

  // ===== "Element" Dialog implementations =====

  const dNew = document.querySelector('dialog#newElement');
  const dConfig = document.querySelector('dialog#configElement');
  const dAction = document.querySelector('dialog#action');
  let configData;

  // ===== newElement dialog =====

  dNew.addEventListener('init', evt => {
    const form = evt.detail.form;

    // populate SELECT with available element types
    var sel = form.querySelector('select[name=type]');
    if ((sel) && (sel.options.length <= 1)) {
      Object.keys(uElements.defs).forEach(function(e) {
        var o = createHTMLElement(sel, 'option', { value: e });
        o.textContent = e;
        o.readonly = !uElements.impl.includes(e);
      });
    }
  });

  // dNew.addEventListener('action', evt => {
  //   console.debug('panel', 'newElement dialog action', evt.detail);
  //   if (evt.detail.action === 'next:configElement') {
  //     // start a new unsaved element configuration
  //     // pass the {type, id } data over to the configElement dialog, no change required
  //     dConfig.showModal(evt.detail.data);
  //   }
  // });


  // ===== configElement dialog =====

  dConfig.addEventListener('init', evt => {
    const ic = '<svg class="icon"><use href="./icons.svg#$"></use></svg>';
    const data = lowerKeys(evt.detail.data);
    const fg = dConfig.querySelector('.form-grid');
    configData = data;
    fg.innerHTML = '';

    // create a label and input for each property, event and action with in/out icons
    function _add(k, isEvent, isAction) {
      const kl = k.toLowerCase();

      // label
      createHTMLElement(fg, 'label').textContent = k + ':';

      // group with icon field icon
      const g = createHTMLElement(fg, 'div', { class: 'form-inline' });

      g.insertAdjacentHTML('beforeend', ic.replace('$', (isAction ? 'start' : 'no')));
      const o = createHTMLElement(g, 'input', {
        name: k,
        value: data[kl] ? data[kl] : '',
        style: 'width:18ch'
      });

      if (isEvent) {
        let l = createHTMLElement(g, 'span', { 'u-action': `next:action:${k}` });
        l.innerHTML = ic.replace('$', 'start');
      }
    } // _add()

    // create properties, events and actions inputs
    dConfig.setAttribute('_id', data.type + '/' + data.id);
    var d = getDefs(data.type);
    getDefs("element").properties.forEach(k => _add(k, false, false));

    if (d.extends) {
      const bd = getDefs(d.extends);
      if (bd?.properties) { bd.properties.forEach(k => _add(k, false, false)); }
      if (bd?.events) { bd.events.forEach(k => _add(k, true, false)); }
      if (bd?.actions) { bd.actions.forEach(k => _add(k, false, true)); }
    }

    if (d?.properties) { d.properties.forEach(k => _add(k, false, false)); }
    if (d?.events) { d.events.forEach(k => _add(k, true, false)); }
    if (d?.actions) { d.actions.forEach(k => _add(k, false, true)); }
  }); // dConfig::init


  // handle action events from the config dialog
  // for opening the action dialog or saving the configuration
  dConfig.addEventListener('action', evt => {
    console.debug('panel', 'configElement dialog action', evt.detail);
    const action = evt.detail.action.toLowerCase();

    // open event configuration dialog
    if (action.startsWith('next:action:')) {
      const ev = action.split(':')[2]; // event name of the srcId Element

      // construct the data for the action dialog
      const actionData = {
        srcId: configData.type + '/' + configData.id,
        event: ev,
      };

      if (evt.detail.data[ev]) {
        const ex = evt.detail.data[ev].split('?');  // like "digitalout/d6?value=$v"
        actionData.target = ex[0]
        actionData.action = ex[1].split('=')[0],
        actionData.value = ex[1].split('=')[1]
      }

      dAction.showModal(actionData)
        .then(data => {
          // merge the action data into the configData
          configData[data.event] = `${data.target}?${data.action}=${data.value}`;
          dConfig.showModal(configData);
        });

    } else if (action === 'save') {
      // save the configuration
      changeConfig(configData.type + '/' + configData.id, evt.detail.data);
    }
  });


  // ===== action dialog =====

  dAction.addEventListener('init', evt => {

    const form = evt.detail.form;
    const data = evt.detail.data;

    const oTarget = form.querySelector('SELECT[name=target]');
    const oEvent = form.querySelector('SELECT[name=event]');
    const oAction = form.querySelector('SELECT[name=action]');
    oTarget.innerHTML = '';

    // populate event dropdown with available events of the srcID element
    function _listEvents() {
      oEvent.innerHTML = '';
      oEvent.value = '';
      createHTMLElement(oEvent, 'option', { disabled: true, selected: true, hidden: true, value: "" }).textContent = 'Select event...';
      const eventList = getDefs(data.srcId).events || [];
      eventList.forEach(a => { createHTMLElement(oEvent, 'option', { value: a }).textContent = a; });
      if (eventList.length === 1) {
        oEvent.selectedIndex = 1;
      }
    }

    // populate target dropdown with type/id of existing elements
    function _listTargets() {
      createHTMLElement(oTarget, 'option', { disabled: true, selected: true, hidden: true, value: "" }).textContent = 'Select target...';
      for (const t in uElements.config) {
        for (const i in uElements.config[t]) {
          const id = t + '/' + i;
          createHTMLElement(oTarget, 'option', { value: id }).textContent = id;
        }
      }
    } // listTargets()


    // populate options for selecting a action for the target
    function _listActions() {
      oAction.innerHTML = '';
      oAction.value = '';
      createHTMLElement(oAction, 'option', { disabled: true, selected: true, hidden: true, value: "" }).textContent = 'Select action...';
      const target =  oTarget.value;

      if (target) {
        const d = getDefs(target);
        const actionList = [].concat(
          (d.extends ? getDefs(d.extends).actions : []),
          (d.actions ? d.actions : []));
        actionList.forEach(a => { createHTMLElement(oAction, 'option', { value: a }).textContent = a; });
        if (actionList.length === 1) {
          oAction.selectedIndex = 1;
        }
      }
    } // _listActions()

    _listEvents();
    if (data.event) {
      oEvent.value = data.event;
      oEvent.readonly = true;
    } else {
      oEvent.readonly = false;
    }

    _listTargets();
    if (data.target) {
      oTarget.value = data.target;
    }
    
    _listActions();
    if (data.action) {
      oAction.value = data.action;
    }

    if (evt.detail.firstInit) {
      oTarget.addEventListener('change', _listActions);
    }

  });


</script>